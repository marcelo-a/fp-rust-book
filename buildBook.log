Running the following examples: 
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
 --> src/data.rs:470:61
  |
47|             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
  |                                                             ^^ help: consider prefixing with an underscore: `_ro`
  |
  = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
 --> src/svg_frontend/right_panel.rs:222:1
  |
22| / fn render_arrows_string(
22| |     visualization_data: &VisualizationData,
22| |     resource_owners_layout: &HashMap<&u64, TimelineColumnData>,
22| |     registry: &Handlebars
... |
27| |     output
27| | }
  | |_^
  |
  = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
 --> src/data.rs:497:62
  |
49|             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
  |                                                              ----------^^^^^^^^^^
  |                                                              |
  |                                                              help: remove this
  |
  = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 1.04s
     Running `target/debug/examples/one_var`
s 1 2 OutOfScope
s 2 3 FullPrivilege
<svg width="750" height="190px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>one_var</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="440" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="440" x2="440" y1="105" y2="125"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="440" x2="440" y1="110" y2="120"><title>s is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="440" y="105"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="440" y="125"><title>s goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <text x="466" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="463,105 453,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="370" x2="370" y1="70" y2="140"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_01_one_var/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_01.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
warning: unused import: `Function`
 --> examples/book_04_01_02_scope/main.rs:1:76
  |
1 | use rrt_lib::data::{ExternalEvent, LifetimeTrait, ResourceOwner, Variable, Function, VisualizationData, Visualizable};
  |                                                                            ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.56s
     Running `target/debug/examples/scope`
s 1 3 OutOfScope
s 3 6 FullPrivilege
<svg width="980" height="270px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="880" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="880" x2="880" y1="125" y2="185"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="880" x2="880" y1="130" y2="180"><title>s is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="880" y="125"><title>obtains data from another value (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="880" y="185"><title>s goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="810" x2="810" y1="70" y2="220"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     {                      // s is not valid here, it’s not yet declared </text>
        <text class="code" x="20" y="130">         let <tspan data-hash="1">s</tspan> = "hello";   // s is valid from this point forward </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">         // do stuff with s </text>
        <text class="code" x="20" y="190">     }                      // this scope is now over, and s is no longer valid </text>
        <text class="code" x="20" y="210"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_02_scope/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_02.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.56s
     Running `target/debug/examples/string_from`
s 1 2 OutOfScope
<svg width="750" height="170px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_from</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="400" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="400" y="105"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
    </g>

    <g id="arrows">
        <text x="426" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="423,105 413,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="330" x2="330" y1="70" y2="120"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_03_string_from/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_03.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.65s
     Running `target/debug/examples/reference`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 4 RevokedPrivilege
s 4 6 FullPrivilege
s 6 6 PartialPrivilege
s 6 7 FullPrivilege
<svg width="910" height="270px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="810" y="90" data-hash="1"><title>s, mutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="810" x2="810" y1="105" y2="145"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="1" class="solid" x1="810" x2="810" y1="145" y2="185"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="1" class="solid" x1="810" x2="810" y1="185" y2="185"><title>some values are statically referencing to s; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="810" x2="810" y1="190" y2="180"><title>some values are statically referencing to s; can only read data</title></line>
        <line data-hash="1" class="solid" x1="810" x2="810" y1="185" y2="205"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="810" y="105"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="810" y="145"><title>mutably lends its data to push_str() (s becomes un-readable until the end of push_str()'s lifetime)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="810" y="145"><title>push_str() is no longer a mutable referece of s, so we may read and write the data</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="810" y="185"><title>statically lends its data to println!() (s becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="810" y="185"><title>println!() no longer borrows from s</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="810" y="205"><title>s goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <text x="836" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="833,105 823,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="810" y="145"><title>push_str() reads from/writes to s</title></use>
        <use xlink:href="#functionDot" data-hash="1" x="810" y="185"><title>println!() reads from s</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="740" x2="740" y1="70" y2="220"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="1">s</tspan>.push_str(", world!"); // push_str() appends a literal to a String </text>
        <text class="code" x="20" y="170">  </text>
        <text class="code" x="20" y="190">     println!("{}", <tspan data-hash="1">s</tspan>); // This will print `hello, world!` </text>
        <text class="code" x="20" y="210"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_04_reference/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_04.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.65s
     Running `target/debug/examples/scope2`
s 1 3 OutOfScope
s 3 6 FullPrivilege
<svg width="970" height="290px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="870" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="870" x2="870" y1="125" y2="185"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="870" x2="870" y1="130" y2="180"><title>s is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="870" y="125"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="870" y="185"><title>s goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <text x="896" y="130" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="893,125 883,125 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="800" x2="800" y1="70" y2="240"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     { </text>
        <text class="code" x="20" y="130">         let <tspan data-hash="1">s</tspan> = String::from("hello"); // s is valid from this point forward </text>
        <text class="code" x="20" y="150">      </text>
        <text class="code" x="20" y="170">         // do stuff with s </text>
        <text class="code" x="20" y="190">     }                                  // this scope is now over, and s is no </text>
        <text class="code" x="20" y="210">                                        // longer valid </text>
        <text class="code" x="20" y="230"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_05_scope2/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_05.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
warning: unused import: `Function`
 --> examples/book_04_01_06_int_copy/main.rs:1:76
  |
1 | use rrt_lib::data::{ExternalEvent, LifetimeTrait, ResourceOwner, Variable, Function, VisualizationData, Visualizable};
  |                                                                            ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.58s
     Running `target/debug/examples/int_copy`
x 1 2 OutOfScope
x 2 3 FullPrivilege
x 3 4 FullPrivilege
y 1 3 OutOfScope
y 3 4 FullPrivilege
<svg width="750" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>int_copy</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="240" y="90" data-hash="1"><title>x, immutable</title>x</text>
        <text style="text-anchor:middle" class="code" x="310" y="90" data-hash="2"><title>y, immutable</title>y</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="240" x2="240" y1="105" y2="125"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="240" x2="240" y1="110" y2="120"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="1" class="solid" x1="240" x2="240" y1="125" y2="145"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="240" x2="240" y1="130" y2="140"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="310" x2="310" y1="125" y2="145"><title>y is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="310" x2="310" y1="130" y2="140"><title>y is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="240" y="105"><title>obtains data from another value (x's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="240" y="125"><title>copies it's value to y (x keeps ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="240" y="145"><title>x goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="310" y="125"><title>obtains data from x (y's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="310" y="145"><title>y goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <polyline stroke-width="5" stroke="gray" points="240,125 300,125 " marker-end="url(#arrowHead)"><title>Duplicate from x to y</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="170" x2="170" y1="70" y2="160"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">x</tspan> = 5; </text>
        <text class="code" x="20" y="130">     let <tspan data-hash="2">y</tspan> = x; </text>
        <text class="code" x="20" y="150"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_06_int_copy/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_06.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.95s
     Running `target/debug/examples/string_move`
s1 1 2 OutOfScope
s1 2 3 FullPrivilege
s2 1 3 OutOfScope
<svg width="750" height="190px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_move</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="480" y="90" data-hash="2"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="410" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="410" x2="410" y1="105" y2="125"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="410" x2="410" y1="110" y2="120"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="410" y="105"><title>obtains data from String::from() (s1's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="410" y="125"><title>moves it's value to s2 (s1 lost ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="480" y="125"><title>obtains data from s1 (s2's lifetime begins from here)</title></use>
    </g>

    <g id="arrows">
        <text x="436" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="433,105 423,105 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of String::from() to s1</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="410,125 470,125 " marker-end="url(#arrowHead)"><title>Move from s1 to s2</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="340" x2="340" y1="70" y2="140"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = <tspan data-hash="3">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130"> let <tspan data-hash="2">s2</tspan> = <tspan data-hash="1">s1</tspan>; </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_07_string_move/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_07.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.98s
     Running `target/debug/examples/string_clone`
s1 1 2 OutOfScope
s1 2 3 FullPrivilege
s1 3 3 PartialPrivilege
s1 3 5 FullPrivilege
s1 5 5 PartialPrivilege
s2 1 3 OutOfScope
s2 3 5 FullPrivilege
s2 5 5 PartialPrivilege
<svg width="750" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_clone</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="540" y="90" data-hash="2"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="470" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="470" x2="470" y1="105" y2="125"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="470" x2="470" y1="110" y2="120"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="1" class="solid" x1="470" x2="470" y1="125" y2="125"><title>some values are statically referencing to s1; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="470" x2="470" y1="130" y2="120"><title>some values are statically referencing to s1; can only read data</title></line>
        <line data-hash="1" class="solid" x1="470" x2="470" y1="125" y2="165"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="470" x2="470" y1="130" y2="160"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="1" class="solid" x1="470" x2="470" y1="165" y2="165"><title>some values are statically referencing to s1; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="470" x2="470" y1="170" y2="160"><title>some values are statically referencing to s1; can only read data</title></line>
        <line data-hash="2" class="solid" x1="540" x2="540" y1="125" y2="165"><title>s2 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="540" x2="540" y1="130" y2="160"><title>s2 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="540" x2="540" y1="165" y2="165"><title>some values are statically referencing to s2; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="540" x2="540" y1="170" y2="160"><title>some values are statically referencing to s2; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="470" y="105"><title>obtains data from String::from() (s1's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="470" y="125"><title>statically lends its data to clone() (s1 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="470" y="125"><title>clone() no longer borrows from s1</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="470" y="165"><title>statically lends its data to println!() (s1 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="470" y="165"><title>println!() no longer borrows from s1</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="540" y="125"><title>obtains data from clone() (s2's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="540" y="165"><title>statically lends its data to println!() (s2 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="540" y="165"><title>println!() no longer borrows from s2</title></use>
    </g>

    <g id="arrows">
        <text x="496" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="493,105 483,105 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of String::from() to s1</title></polyline>
        <text x="566" y="130" font-size = "20" font-style="italic" class="heavy" ><title>clone()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="563,125 553,125 " marker-end="url(#arrowHead)"><title>Move from the return value of clone() to s2</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="470" y="125"><title>clone() reads from s1</title></use>
        <use xlink:href="#functionDot" data-hash="1" x="470" y="165"><title>println!() reads from s1</title></use>
        <use xlink:href="#functionDot" data-hash="2" x="540" y="165"><title>println!() reads from s2</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="400" x2="400" y1="70" y2="180"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = <tspan data-hash="3">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130"> let <tspan data-hash="2">s2</tspan> = <tspan data-hash="1">s1</tspan>.<tspan data-hash="4">clone</tspan>(); </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170"> <tspan data-hash="5">println!</tspan>("s1 = {}, s2 = {}", <tspan data-hash="1">s1</tspan>, <tspan data-hash="2">s2</tspan>); </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_09_string_clone/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_09.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.99s
     Running `target/debug/examples/int_copy_2`
x 1 2 OutOfScope
x 2 3 FullPrivilege
x 3 5 FullPrivilege
x 5 5 PartialPrivilege
x 5 6 FullPrivilege
y 1 3 OutOfScope
y 3 5 FullPrivilege
y 5 5 PartialPrivilege
y 5 6 FullPrivilege
<svg width="750" height="250px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>int_copy_2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="470" y="90" data-hash="1"><title>x, immutable</title>x</text>
        <text style="text-anchor:middle" class="code" x="540" y="90" data-hash="2"><title>y, immutable</title>y</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="470" x2="470" y1="105" y2="125"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="470" x2="470" y1="110" y2="120"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="1" class="solid" x1="470" x2="470" y1="125" y2="165"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="470" x2="470" y1="130" y2="160"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="1" class="solid" x1="470" x2="470" y1="165" y2="165"><title>some values are statically referencing to x; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="470" x2="470" y1="170" y2="160"><title>some values are statically referencing to x; can only read data</title></line>
        <line data-hash="1" class="solid" x1="470" x2="470" y1="165" y2="185"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="470" x2="470" y1="170" y2="180"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="540" x2="540" y1="125" y2="165"><title>y is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="540" x2="540" y1="130" y2="160"><title>y is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="540" x2="540" y1="165" y2="165"><title>some values are statically referencing to y; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="540" x2="540" y1="170" y2="160"><title>some values are statically referencing to y; can only read data</title></line>
        <line data-hash="2" class="solid" x1="540" x2="540" y1="165" y2="185"><title>y is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="540" x2="540" y1="170" y2="180"><title>y is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="470" y="105"><title>obtains data from another value (x's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="470" y="125"><title>copies it's value to y (x keeps ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="470" y="165"><title>statically lends its data to println!() (x becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="470" y="165"><title>println!() no longer borrows from x</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="470" y="185"><title>x goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="540" y="125"><title>obtains data from x (y's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="540" y="165"><title>statically lends its data to println!() (y becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="540" y="165"><title>println!() no longer borrows from y</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="540" y="185"><title>y goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <polyline stroke-width="5" stroke="gray" points="470,125 530,125 " marker-end="url(#arrowHead)"><title>Duplicate from x to y</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="470" y="165"><title>println!() reads from x</title></use>
        <use xlink:href="#functionDot" data-hash="2" x="540" y="165"><title>println!() reads from y</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="400" x2="400" y1="70" y2="200"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">x</tspan> = 5; </text>
        <text class="code" x="20" y="130">     let <tspan data-hash="2">y</tspan> = <tspan data-hash="1">x</tspan>; </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">     println!("x = {}, y = {}", <tspan data-hash="1">x</tspan>, <tspan data-hash="2">y</tspan>); </text>
        <text class="code" x="20" y="190"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_10_int_copy_2/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_10.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.95s
     Running `target/debug/examples/ownership_function`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 13 ResourceMoved
x 1 7 OutOfScope
x 7 9 FullPrivilege
x 9 13 FullPrivilege
some_string 1 16 OutOfScope
some_string 16 17 FullPrivilege
some_string 17 17 PartialPrivilege
some_string 17 18 FullPrivilege
some_integer 1 21 OutOfScope
some_integer 21 22 FullPrivilege
some_integer 22 22 PartialPrivilege
some_integer 22 23 FullPrivilege
<svg width="1280" height="590px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>ownership_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="1070" y="90" data-hash="3"><title>some_string, immutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="1180" y="90" data-hash="4"><title>some_integer, immutable</title>some_integer</text>
        <text style="text-anchor:middle" class="code" x="970" y="90" data-hash="2"><title>x, immutable</title>x</text>
        <text style="text-anchor:middle" class="code" x="900" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="900" x2="900" y1="105" y2="145"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="900" x2="900" y1="110" y2="140"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="970" x2="970" y1="205" y2="245"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="970" x2="970" y1="210" y2="240"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="970" x2="970" y1="245" y2="325"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="970" x2="970" y1="250" y2="320"><title>x is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="3" class="solid" x1="1070" x2="1070" y1="385" y2="405"><title>some_string is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1070" x2="1070" y1="390" y2="400"><title>some_string is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="3" class="solid" x1="1070" x2="1070" y1="405" y2="405"><title>some values are statically referencing to some_string; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1070" x2="1070" y1="410" y2="400"><title>some values are statically referencing to some_string; can only read data</title></line>
        <line data-hash="3" class="solid" x1="1070" x2="1070" y1="405" y2="425"><title>some_string is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1070" x2="1070" y1="410" y2="420"><title>some_string is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="4" class="solid" x1="1180" x2="1180" y1="485" y2="505"><title>some_integer is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1180" x2="1180" y1="490" y2="500"><title>some_integer is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="4" class="solid" x1="1180" x2="1180" y1="505" y2="505"><title>some values are statically referencing to some_integer; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1180" x2="1180" y1="510" y2="500"><title>some values are statically referencing to some_integer; can only read data</title></line>
        <line data-hash="4" class="solid" x1="1180" x2="1180" y1="505" y2="525"><title>some_integer is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1180" x2="1180" y1="510" y2="520"><title>some_integer is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="900" y="105"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="900" y="145"><title>moves it's value to takes_ownership() (s lost ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="900" y="325"><title>s goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="970" y="205"><title>obtains data from another value (x's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="970" y="245"><title>copies it's value to makes_copy() (x keeps ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="970" y="325"><title>x goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="1070" y="385"><title>obtains data from another value (some_string's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="1070" y="405"><title>statically lends its data to println!() (some_string becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="1070" y="405"><title>println!() no longer borrows from some_string</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="1070" y="425"><title>some_string goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="1180" y="485"><title>obtains data from another value (some_integer's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="1180" y="505"><title>statically lends its data to println!() (some_integer becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="1180" y="505"><title>println!() no longer borrows from some_integer</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="1180" y="525"><title>some_integer goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <text x="926" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="923,105 913,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <text x="865" y="150" font-size = "20" font-style="italic" class="heavy" ><title>takes_ownership()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="895,145 885,145 " marker-end="url(#arrowHead)"><title>Move from s to the parameter of takes_ownership()</title></polyline>
        <text x="935" y="250" font-size = "20" font-style="italic" class="heavy" ><title>makes_copy()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="965,245 955,245 " marker-end="url(#arrowHead)"><title>Duplicate from x to the parameter of makes_copy()</title></polyline>
        <use xlink:href="#functionDot" data-hash="3" x="1070" y="405"><title>println!() reads from some_string</title></use>
        <use xlink:href="#functionDot" data-hash="4" x="1180" y="505"><title>println!() reads from some_integer</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="830" x2="830" y1="70" y2="540"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = <tspan data-hash="5">String::from</tspan>("hello");  // s comes into scope </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="6">takes_ownership</tspan>(<tspan data-hash="1">s</tspan>);             // s's value moves into the function... </text>
        <text class="code" x="20" y="170">                                     // ... and so is no longer valid here </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="2">x</tspan> = 5;                      // x comes into scope </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250">     <tspan data-hash="7">makes_copy</tspan>(<tspan data-hash="2">x</tspan>);                  // x would move into the function, </text>
        <text class="code" x="20" y="270">                                     // but i32 is Copy, so it’s okay to still </text>
        <text class="code" x="20" y="290">                                     // use x afterward </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> } // Here, x goes out of scope, then s. But because s's value was moved, nothing </text>
        <text class="code" x="20" y="350">   // special happens. </text>
        <text class="code" x="20" y="370">  </text>
        <text class="code" x="20" y="390"> fn <tspan data-hash="6">takes_ownership</tspan>(<tspan data-hash="3">some_string</tspan>: String) { // some_string comes into scope </text>
        <text class="code" x="20" y="410">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="3">some_string</tspan>); </text>
        <text class="code" x="20" y="430"> } // Here, some_string goes out of scope and `drop` is called. The backing </text>
        <text class="code" x="20" y="450">   // memory is freed. </text>
        <text class="code" x="20" y="470">  </text>
        <text class="code" x="20" y="490"> fn <tspan data-hash="7">makes_copy</tspan>(<tspan data-hash="4">some_integer</tspan>: i32) { // some_integer comes into scope </text>
        <text class="code" x="20" y="510">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="4">some_integer</tspan>); </text>
        <text class="code" x="20" y="530"> } // Here, some_integer goes out of scope. Nothing special happens. </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_11_ownership_function/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_11.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.73s
     Running `target/debug/examples/return_values`
s1 1 2 OutOfScope
s1 2 10 FullPrivilege
s2 1 5 OutOfScope
s2 5 7 FullPrivilege
s2 7 10 ResourceMoved
s3 1 7 OutOfScope
s3 7 10 FullPrivilege
some_string 1 17 OutOfScope
some_string 17 19 FullPrivilege
some_string 19 22 ResourceMoved
a_string 1 25 OutOfScope
a_string 25 28 FullPrivilege
a_string 28 29 ResourceMoved
<svg width="1290" height="710px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>return_values</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="950" y="90" data-hash="2"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="880" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="1190" y="90" data-hash="5"><title>a_string, immutable</title>a_string</text>
        <text style="text-anchor:middle" class="code" x="1120" y="90" data-hash="4"><title>some_string, immutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="1020" y="90" data-hash="3"><title>s3, immutable</title>s3</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="880" x2="880" y1="105" y2="265"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="880" x2="880" y1="110" y2="260"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="950" x2="950" y1="165" y2="205"><title>s2 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="950" x2="950" y1="170" y2="200"><title>s2 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="3" class="solid" x1="1020" x2="1020" y1="205" y2="265"><title>s3 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1020" x2="1020" y1="210" y2="260"><title>s3 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="4" class="solid" x1="1120" x2="1120" y1="405" y2="445"><title>some_string is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1120" x2="1120" y1="410" y2="440"><title>some_string is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="5" class="solid" x1="1190" x2="1190" y1="565" y2="625"><title>a_string is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1190" x2="1190" y1="570" y2="620"><title>a_string is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="880" y="105"><title>obtains data from gives_ownership() (s1's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="880" y="265"><title>s1 goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="950" y="165"><title>obtains data from another value (s2's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="950" y="205"><title>moves it's value to takes_and_gives_back() (s2 lost ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="950" y="265"><title>s2 goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="1020" y="205"><title>obtains data from takes_and_gives_back() (s3's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="1020" y="265"><title>s3 goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="1120" y="405"><title>obtains data from another value (some_string's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="1120" y="445"><title>moves it's value to another value (some_string lost ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="1120" y="505"><title>some_string goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="1190" y="565"><title>obtains data from another value (a_string's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="1190" y="625"><title>moves it's value to another value (a_string lost ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="1190" y="645"><title>a_string goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <text x="906" y="110" font-size = "20" font-style="italic" class="heavy" ><title>gives_ownership()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="903,105 893,105 " marker-end="url(#arrowHead)"><title>Move from the return value of gives_ownership() to s1</title></polyline>
        <text x="915" y="210" font-size = "20" font-style="italic" class="heavy" ><title>takes_and_gives_back()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="945,205 935,205 " marker-end="url(#arrowHead)"><title>Move from s2 to the parameter of takes_and_gives_back()</title></polyline>
        <text x="1046" y="210" font-size = "20" font-style="italic" class="heavy" ><title>takes_and_gives_back()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="1043,205 1033,205 " marker-end="url(#arrowHead)"><title>Move from the return value of takes_and_gives_back() to s3</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="810" x2="810" y1="70" y2="660"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="6">gives_ownership</tspan>();         // gives_ownership moves its return </text>
        <text class="code" x="20" y="130">                                         // value into s1 </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="2">s2</tspan> = String::from("hello");     // s2 comes into scope </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="3">s3</tspan> = <tspan data-hash="7">takes_and_gives_back</tspan>(<tspan data-hash="2">s2</tspan>);  // s2 is moved into </text>
        <text class="code" x="20" y="230">                                         // takes_and_gives_back, which also </text>
        <text class="code" x="20" y="250">                                         // moves its return value into s3 </text>
        <text class="code" x="20" y="270"> } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was </text>
        <text class="code" x="20" y="290">   // moved, so nothing happens. s1 goes out of scope and is dropped. </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> fn <tspan data-hash="6">gives_ownership</tspan>() -> String {             // gives_ownership will move its </text>
        <text class="code" x="20" y="350">                                              // return value into the function </text>
        <text class="code" x="20" y="370">                                              // that calls it </text>
        <text class="code" x="20" y="390">  </text>
        <text class="code" x="20" y="410">     let <tspan data-hash="4">some_string</tspan> = String::from("hello"); // some_string comes into scope </text>
        <text class="code" x="20" y="430">  </text>
        <text class="code" x="20" y="450">     <tspan data-hash="4">some_string</tspan>                             // some_string is returned and </text>
        <text class="code" x="20" y="470">                                              // moves out to the calling </text>
        <text class="code" x="20" y="490">                                              // function </text>
        <text class="code" x="20" y="510"> } </text>
        <text class="code" x="20" y="530">  </text>
        <text class="code" x="20" y="550"> // takes_and_gives_back will take a String and return one </text>
        <text class="code" x="20" y="570"> fn <tspan data-hash="7">takes_and_gives_back</tspan>(<tspan data-hash="5">a_string</tspan>: String) -> String { // a_string comes into </text>
        <text class="code" x="20" y="590">                                                       // scope </text>
        <text class="code" x="20" y="610">  </text>
        <text class="code" x="20" y="630">     <tspan data-hash="5">a_string</tspan>  // a_string is returned and moves out to the calling function </text>
        <text class="code" x="20" y="650"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_12_return_values/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_12.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.95s
     Running `target/debug/examples/return_tuple`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
s1 4 7 FullPrivilege
len 1 4 OutOfScope
len 4 6 FullPrivilege
len 6 6 PartialPrivilege
len 6 7 FullPrivilege
s2 1 4 OutOfScope
s2 4 6 FullPrivilege
s2 6 6 PartialPrivilege
s 1 9 OutOfScope
s 9 10 FullPrivilege
s 10 10 PartialPrivilege
s 10 12 FullPrivilege
length 1 10 OutOfScope
length 10 12 FullPrivilege
<svg width="1130" height="390px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>return_tuple</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="750" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="1030" y="90" data-hash="5"><title>length, immutable</title>length</text>
        <text style="text-anchor:middle" class="code" x="890" y="90" data-hash="3"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="820" y="90" data-hash="2"><title>len, immutable</title>len</text>
        <text style="text-anchor:middle" class="code" x="960" y="90" data-hash="4"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="750" x2="750" y1="105" y2="145"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="110" y2="140"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="1" class="solid" x1="750" x2="750" y1="145" y2="145"><title>some values are statically referencing to s1; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="150" y2="140"><title>some values are statically referencing to s1; can only read data</title></line>
        <line data-hash="1" class="solid" x1="750" x2="750" y1="145" y2="205"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="150" y2="200"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="820" x2="820" y1="145" y2="185"><title>len is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="150" y2="180"><title>len is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="820" x2="820" y1="185" y2="185"><title>some values are statically referencing to len; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="190" y2="180"><title>some values are statically referencing to len; can only read data</title></line>
        <line data-hash="2" class="solid" x1="820" x2="820" y1="185" y2="205"><title>len is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="190" y2="200"><title>len is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="3" class="solid" x1="890" x2="890" y1="145" y2="185"><title>s2 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="890" x2="890" y1="150" y2="180"><title>s2 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="3" class="solid" x1="890" x2="890" y1="185" y2="185"><title>some values are statically referencing to s2; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="890" x2="890" y1="190" y2="180"><title>some values are statically referencing to s2; can only read data</title></line>
        <line data-hash="4" class="solid" x1="960" x2="960" y1="245" y2="265"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="960" x2="960" y1="250" y2="260"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="4" class="solid" x1="960" x2="960" y1="265" y2="265"><title>some values are statically referencing to s; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="960" x2="960" y1="270" y2="260"><title>some values are statically referencing to s; can only read data</title></line>
        <line data-hash="4" class="solid" x1="960" x2="960" y1="265" y2="305"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="960" x2="960" y1="270" y2="300"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="5" class="solid" x1="1030" x2="1030" y1="265" y2="305"><title>length is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="1030" x2="1030" y1="270" y2="300"><title>length is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="750" y="105"><title>obtains data from String::from() (s1's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="750" y="145"><title>statically lends its data to calculate_length() (s1 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="750" y="145"><title>calculate_length() no longer borrows from s1</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="750" y="205"><title>s1 goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="820" y="145"><title>obtains data from calculate_length() (len's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="820" y="185"><title>statically lends its data to println!() (len becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="820" y="185"><title>println!() no longer borrows from len</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="820" y="205"><title>len goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="890" y="145"><title>obtains data from calculate_length() (s2's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="890" y="185"><title>statically lends its data to println!() (s2 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="890" y="185"><title>println!() no longer borrows from s2</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="960" y="245"><title>obtains data from another value (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="960" y="265"><title>statically lends its data to len() (s becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="960" y="265"><title>len() no longer borrows from s</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="960" y="305"><title>s goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="1030" y="265"><title>obtains data from len() (length's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="1030" y="305"><title>length goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <text x="776" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="773,105 763,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s1</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="750" y="145"><title>calculate_length() reads from s1</title></use>
        <text x="916" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="913,145 903,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to s2</title></polyline>
        <text x="846" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="843,145 833,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to len</title></polyline>
        <use xlink:href="#functionDot" data-hash="3" x="890" y="185"><title>println!() reads from s2</title></use>
        <use xlink:href="#functionDot" data-hash="2" x="820" y="185"><title>println!() reads from len</title></use>
        <use xlink:href="#functionDot" data-hash="4" x="960" y="265"><title>len() reads from s</title></use>
        <text x="1056" y="270" font-size = "20" font-style="italic" class="heavy" ><title>len()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="1053,265 1043,265 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of len() to length</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="680" x2="680" y1="70" y2="340"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="7">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let (<tspan data-hash="3">s2</tspan>, <tspan data-hash="2">len</tspan>) = <tspan data-hash="6">calculate_length</tspan>(<tspan data-hash="1">&amp;s1</tspan>);; </text>
        <text class="code" x="20" y="170">      </text>
        <text class="code" x="20" y="190">     <tspan data-hash="9">println!</tspan>("The length of '{}' is {}.", <tspan data-hash="3">s2</tspan>, <tspan data-hash="2">len</tspan>); </text>
        <text class="code" x="20" y="210"> } </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> fn <tspan data-hash="6">calculate_length</tspan>(<tspan data-hash="4">s</tspan>: String) -> (String, usize) { </text>
        <text class="code" x="20" y="270">     let <tspan data-hash="5">length</tspan> = <tspan data-hash="4">s</tspan>.<tspan data-hash="8">len</tspan>(); // len() returns the length of a String </text>
        <text class="code" x="20" y="290">  </text>
        <text class="code" x="20" y="310">     (<tspan data-hash="4">s</tspan>, <tspan data-hash="5">length</tspan>) </text>
        <text class="code" x="20" y="330"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_13_return_tuple/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_13.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.94s
     Running `target/debug/examples/pass_reference`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
s1 4 7 FullPrivilege
len 1 4 OutOfScope
len 4 7 FullPrivilege
s 1 9 OutOfScope
s 9 10 FullPrivilege
s 10 10 PartialPrivilege
s 10 11 FullPrivilege
<svg width="850" height="350px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>pass_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="610" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="680" y="90" data-hash="2"><title>len, immutable</title>len</text>
        <text style="text-anchor:middle" class="code" x="750" y="90" data-hash="3"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="610" x2="610" y1="105" y2="145"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="610" x2="610" y1="110" y2="140"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="1" class="solid" x1="610" x2="610" y1="145" y2="145"><title>some values are statically referencing to s1; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="610" x2="610" y1="150" y2="140"><title>some values are statically referencing to s1; can only read data</title></line>
        <line data-hash="1" class="solid" x1="610" x2="610" y1="145" y2="205"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="610" x2="610" y1="150" y2="200"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="2" class="solid" x1="680" x2="680" y1="145" y2="205"><title>len is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="680" x2="680" y1="150" y2="200"><title>len is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="3" class="solid" x1="750" x2="750" y1="245" y2="265"><title>s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="250" y2="260"><title>s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line data-hash="3" class="solid" x1="750" x2="750" y1="265" y2="265"><title>some values are statically referencing to s; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="270" y2="260"><title>some values are statically referencing to s; can only read data</title></line>
        <line data-hash="3" class="solid" x1="750" x2="750" y1="265" y2="285"><title>s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="270" y2="280"><title>s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="610" y="105"><title>obtains data from String::from() (s1's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="610" y="145"><title>statically lends its data to calculate_length() (s1 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="610" y="145"><title>calculate_length() no longer borrows from s1</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="610" y="205"><title>s1 goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="680" y="145"><title>obtains data from calculate_length() (len's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="680" y="205"><title>len goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="750" y="245"><title>obtains data from another value (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="750" y="265"><title>statically lends its data to len() (s becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="750" y="265"><title>len() no longer borrows from s</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="750" y="285"><title>s goes out of scope. The data is not dropped because s is not the owner.</title></use>
    </g>

    <g id="arrows">
        <text x="636" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="633,105 623,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s1</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="610" y="145"><title>calculate_length() reads from s1</title></use>
        <text x="706" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="703,145 693,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to len</title></polyline>
        <use xlink:href="#functionDot" data-hash="3" x="750" y="265"><title>len() reads from s</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="540" x2="540" y1="70" y2="300"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="5">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let <tspan data-hash="2">len</tspan> = <tspan data-hash="4">calculate_length</tspan>(<tspan data-hash="1">&amp;s1</tspan>); </text>
        <text class="code" x="20" y="170">  </text>
        <text class="code" x="20" y="190">     println!("The length of '{}' is {}.", <tspan data-hash="1">s1</tspan>, <tspan data-hash="2">len</tspan>); </text>
        <text class="code" x="20" y="210"> } </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> fn <tspan data-hash="4">calculate_length</tspan>(<tspan data-hash="3">s</tspan>: &amp;String) -> usize { </text>
        <text class="code" x="20" y="270">     <tspan data-hash="3">s</tspan>.len() </text>
        <text class="code" x="20" y="290"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_01_pass_reference/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_01.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.95s
     Running `target/debug/examples/acquire_from_function`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
len 1 4 OutOfScope
<svg width="750" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>acquire_from_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="420" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="490" y="90" data-hash="2"><title>len, immutable</title>len</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="420" x2="420" y1="105" y2="145"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="420" x2="420" y1="110" y2="140"><title>s1 is the unique value that can access the data in memory; can only read data</title></line>
        <line data-hash="1" class="solid" x1="420" x2="420" y1="145" y2="145"><title>some values are statically referencing to s1; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="420" x2="420" y1="150" y2="140"><title>some values are statically referencing to s1; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="420" y="105"><title>obtains data from String::from() (s1's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="420" y="145"><title>statically lends its data to calculate_length() (s1 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="420" y="145"><title>calculate_length() no longer borrows from s1</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="490" y="145"><title>obtains data from calculate_length() (len's lifetime begins from here)</title></use>
    </g>

    <g id="arrows">
        <text x="446" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="443,105 433,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s1</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="420" y="145"><title>calculate_length() reads from s1</title></use>
        <text x="516" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="513,145 503,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to len</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="350" x2="350" y1="70" y2="160"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = <tspan data-hash="4">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150"> let <tspan data-hash="2">len</tspan> = <tspan data-hash="3">calculate_length</tspan>(&amp;<tspan data-hash="1">s1</tspan>); </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_02_acquire_from_function/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_02.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.89s
     Running `target/debug/examples/safely_out_of_scope`
s 1 2 OutOfScope
s 2 3 FullPrivilege
s 3 3 PartialPrivilege
s 3 4 FullPrivilege
<svg width="980" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>safely_out_of_scope</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="880" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="880" x2="880" y1="105" y2="125"><title>s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line class="colorless" stroke-width="8px" x1="880" x2="880" y1="110" y2="120"><title>s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line data-hash="1" class="solid" x1="880" x2="880" y1="125" y2="125"><title>some values are statically referencing to s; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="880" x2="880" y1="130" y2="120"><title>some values are statically referencing to s; can only read data</title></line>
        <line data-hash="1" class="solid" x1="880" x2="880" y1="125" y2="145"><title>s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line class="colorless" stroke-width="8px" x1="880" x2="880" y1="130" y2="140"><title>s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="880" y="105"><title>obtains data from another value (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="880" y="125"><title>statically lends its data to len() (s becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="880" y="125"><title>len() no longer borrows from s</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="880" y="145"><title>s goes out of scope. The data is not dropped because s is not the owner.</title></use>
    </g>

    <g id="arrows">
        <use xlink:href="#functionDot" data-hash="1" x="880" y="125"><title>len() reads from s</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="810" x2="810" y1="70" y2="180"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> fn <tspan data-hash="3">calculate_length</tspan>(<tspan data-hash="1">s</tspan>: &amp;String) -> usize { </text>
        <text class="code" x="20" y="130">     <tspan data-hash="1">s</tspan>.<tspan data-hash="2">len</tspan>() </text>
        <text class="code" x="20" y="150"> } // Here, s goes out of scope. But because it does not have ownership of what </text>
        <text class="code" x="20" y="170">   // it refers to, nothing happens. </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_03_safely_out_of_scope/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_03.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.60s
     Running `target/debug/examples/mut_ref`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 4 PartialPrivilege
s 4 5 FullPrivilege
some_string 1 7 OutOfScope
some_string 7 8 FullPrivilege
some_string 8 8 PartialPrivilege
some_string 8 9 FullPrivilege
<svg width="750" height="310px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>mut_ref</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="480" y="90" data-hash="1"><title>s, mutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="580" y="90" data-hash="2"><title>some_string, mutable</title>some_string</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="480" x2="480" y1="105" y2="145"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="1" class="solid" x1="480" x2="480" y1="145" y2="145"><title>some values are statically referencing to s; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="480" x2="480" y1="150" y2="140"><title>some values are statically referencing to s; can only read data</title></line>
        <line data-hash="1" class="solid" x1="480" x2="480" y1="145" y2="165"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="2" class="solid" x1="580" x2="580" y1="205" y2="225"><title>some_string is the unique value that can access the data in memory; can read and write data; can point to another piece of data</title></line>
        <line data-hash="2" class="solid" x1="580" x2="580" y1="225" y2="225"><title>some values are statically referencing to some_string; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="580" x2="580" y1="230" y2="220"><title>some values are statically referencing to some_string; can only read data</title></line>
        <line data-hash="2" class="solid" x1="580" x2="580" y1="225" y2="245"><title>some_string is the unique value that can access the data in memory; can read and write data; can point to another piece of data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="480" y="105"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="480" y="145"><title>statically lends its data to change() (s becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="480" y="145"><title>change() no longer borrows from s</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="480" y="165"><title>s goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="580" y="205"><title>obtains data from another value (some_string's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="580" y="225"><title>statically lends its data to push_str() (some_string becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="580" y="225"><title>push_str() no longer borrows from some_string</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="580" y="245"><title>some_string goes out of scope. The data is not dropped because some_string is not the owner.</title></use>
    </g>

    <g id="arrows">
        <text x="506" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="503,105 493,105 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of String::from() to s</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="480" y="145"><title>change() reads from s</title></use>
        <use xlink:href="#functionDot" data-hash="2" x="580" y="225"><title>push_str() reads from some_string</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="410" x2="410" y1="70" y2="260"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="1">s</tspan> = <tspan data-hash="4">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="3">change</tspan>(&amp;mut <tspan data-hash="1">s</tspan>); </text>
        <text class="code" x="20" y="170"> } </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210"> fn change(<tspan data-hash="2">some_string</tspan>: &amp;mut String) { </text>
        <text class="code" x="20" y="230">     <tspan data-hash="2">some_string</tspan>.<tspan data-hash="5">push_str</tspan>(", world"); </text>
        <text class="code" x="20" y="250"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_05_mut_ref/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_05.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.58s
     Running `target/debug/examples/scope_reference`
s 1 2 OutOfScope
s 2 5 FullPrivilege
s 5 6 RevokedPrivilege
s 6 9 FullPrivilege
r1 1 5 OutOfScope
r1 5 6 FullPrivilege
r1 6 6 OutOfScope
r2 1 9 OutOfScope
<svg width="1140" height="310px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="1040" y="90" data-hash="3"><title>r2, immutable</title>r2</text>
        <text style="text-anchor:middle" class="code" x="970" y="90" data-hash="2"><title>r1, immutable</title>r1</text>
        <text style="text-anchor:middle" class="code" x="900" y="90" data-hash="1"><title>s, mutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="900" x2="900" y1="105" y2="165"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="1" class="solid" x1="900" x2="900" y1="185" y2="245"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="2" class="solid" x1="970" x2="970" y1="165" y2="185"><title>r1 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line class="colorless" stroke-width="8px" x1="970" x2="970" y1="170" y2="180"><title>r1 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="900" y="105"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="900" y="165"><title>mutably lends its data to r1 (s becomes un-readable until the end of r1's lifetime)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="900" y="185"><title>r1 is no longer a mutable referece of s, so we may read and write the data</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="900" y="245"><title>mutably lends its data to r2 (s becomes un-readable until the end of r2's lifetime)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="970" y="165"><title>mutably borrows data from s (r1 gains read and write access to data)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="970" y="185"><title>returns borrowed data to s (r1's lifetime ends here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="970" y="185"><title>r1 goes out of scope. The data is not dropped because r1 is not the owner.</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="1040" y="245"><title>mutably borrows data from s (r2 gains read and write access to data)</title></use>
    </g>

    <g id="arrows">
        <text x="926" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="923,105 913,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="900,165 960,165 " marker-end="url(#arrowHead)"><title>Mutable borrow from s to r1</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="970,185 910,185 " marker-end="url(#arrowHead)"><title>Return mutably borrowed resource from r1 to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="900,245 1030,245 " marker-end="url(#arrowHead)"><title>Mutable borrow from s to r2</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="830" x2="830" y1="70" y2="260"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let mut <tspan data-hash="1">s</tspan> = <tspan data-hash="4">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150"> { </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="2">r1</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210"> } // r1 goes out of scope here, so we can make a new reference with no problems. </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> let <tspan data-hash="3">r2</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_07_scope_reference/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_07.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.89s
     Running `target/debug/examples/shared_and_unique_borrow`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 5 PartialPrivilege
s 5 6 PartialPrivilege
s 6 6 PartialPrivilege
s 6 9 FullPrivilege
s 9 10 RevokedPrivilege
s 10 12 FullPrivilege
r1 1 4 OutOfScope
r1 4 6 PartialPrivilege
r1 6 6 PartialPrivilege
r1 6 6 PartialPrivilege
r1 6 12 OutOfScope
r2 1 5 OutOfScope
r2 5 6 PartialPrivilege
r2 6 6 PartialPrivilege
r2 6 6 PartialPrivilege
r2 6 12 OutOfScope
r3 1 9 OutOfScope
r3 9 10 FullPrivilege
r3 10 10 PartialPrivilege
r3 10 10 FullPrivilege
r3 10 12 OutOfScope
<svg width="930" height="370px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>shared_and_unique_borrow</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="830" y="90" data-hash="4"><title>r3, immutable</title>r3</text>
        <text style="text-anchor:middle" class="code" x="620" y="90" data-hash="1"><title>s, mutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="760" y="90" data-hash="3"><title>r2, immutable</title>r2</text>
        <text style="text-anchor:middle" class="code" x="690" y="90" data-hash="2"><title>r1, immutable</title>r1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="620" x2="620" y1="105" y2="145"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="1" class="solid" x1="620" x2="620" y1="145" y2="165"><title>some values are statically referencing to s; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="620" x2="620" y1="150" y2="160"><title>some values are statically referencing to s; can only read data</title></line>
        <line data-hash="1" class="solid" x1="620" x2="620" y1="165" y2="185"><title>some values are statically referencing to s; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="620" x2="620" y1="170" y2="180"><title>some values are statically referencing to s; can only read data</title></line>
        <line data-hash="1" class="solid" x1="620" x2="620" y1="185" y2="185"><title>some values are statically referencing to s; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="620" x2="620" y1="190" y2="180"><title>some values are statically referencing to s; can only read data</title></line>
        <line data-hash="1" class="solid" x1="620" x2="620" y1="185" y2="245"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="1" class="solid" x1="620" x2="620" y1="265" y2="305"><title>s is the unique value that can access the data in memory; can read and write data</title></line>
        <line data-hash="2" class="solid" x1="690" x2="690" y1="145" y2="185"><title>some values are statically referencing to r1; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="690" x2="690" y1="150" y2="180"><title>some values are statically referencing to r1; can only read data</title></line>
        <line data-hash="2" class="solid" x1="690" x2="690" y1="185" y2="185"><title>some values are statically referencing to r1; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="690" x2="690" y1="190" y2="180"><title>some values are statically referencing to r1; can only read data</title></line>
        <line data-hash="2" class="solid" x1="690" x2="690" y1="185" y2="185"><title>some values are statically referencing to r1; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="690" x2="690" y1="190" y2="180"><title>some values are statically referencing to r1; can only read data</title></line>
        <line data-hash="3" class="solid" x1="760" x2="760" y1="165" y2="185"><title>some values are statically referencing to r2; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="760" x2="760" y1="170" y2="180"><title>some values are statically referencing to r2; can only read data</title></line>
        <line data-hash="3" class="solid" x1="760" x2="760" y1="185" y2="185"><title>some values are statically referencing to r2; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="760" x2="760" y1="190" y2="180"><title>some values are statically referencing to r2; can only read data</title></line>
        <line data-hash="3" class="solid" x1="760" x2="760" y1="185" y2="185"><title>some values are statically referencing to r2; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="760" x2="760" y1="190" y2="180"><title>some values are statically referencing to r2; can only read data</title></line>
        <line data-hash="4" class="solid" x1="830" x2="830" y1="245" y2="265"><title>r3 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line class="colorless" stroke-width="8px" x1="830" x2="830" y1="250" y2="260"><title>r3 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line data-hash="4" class="solid" x1="830" x2="830" y1="265" y2="265"><title>some values are statically referencing to r3; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="830" x2="830" y1="270" y2="260"><title>some values are statically referencing to r3; can only read data</title></line>
        <line data-hash="4" class="solid" x1="830" x2="830" y1="265" y2="265"><title>r3 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
        <line class="colorless" stroke-width="8px" x1="830" x2="830" y1="270" y2="260"><title>r3 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="620" y="105"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="620" y="145"><title>statically lends its data to r1 (s becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="620" y="165"><title>statically lends its data to r2 (s becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="620" y="185"><title>r1 no longer borrows from s</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="620" y="185"><title>r2 no longer borrows from s</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="620" y="245"><title>mutably lends its data to r3 (s becomes un-readable until the end of r3's lifetime)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="620" y="265"><title>r3 is no longer a mutable referece of s, so we may read and write the data</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="620" y="305"><title>s goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="690" y="145"><title>statically borrows data from s (r1 gains read only access to data)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="690" y="185"><title>statically lends its data to println!() (r1 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="690" y="185"><title>println!() no longer borrows from r1</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="690" y="185"><title>returns borrowed data to s (r1's lifetime ends here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="690" y="305"><title>r1 goes out of scope. The data is not dropped because r1 is not the owner.</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="760" y="165"><title>statically borrows data from s (r2 gains read only access to data)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="760" y="185"><title>statically lends its data to println!() (r2 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="760" y="185"><title>println!() no longer borrows from r2</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="760" y="185"><title>returns borrowed data to s (r2's lifetime ends here)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="760" y="305"><title>r2 goes out of scope. The data is not dropped because r2 is not the owner.</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="830" y="245"><title>mutably borrows data from s (r3 gains read and write access to data)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="830" y="265"><title>statically lends its data to println!() (r3 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="830" y="265"><title>println!() no longer borrows from r3</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="830" y="265"><title>returns borrowed data to s (r3's lifetime ends here)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="830" y="305"><title>r3 goes out of scope. The data is not dropped because r3 is not the owner.</title></use>
    </g>

    <g id="arrows">
        <text x="646" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="643,105 633,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="620,145 680,145 " marker-end="url(#arrowHead)"><title>Static borrow from s to r1</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="620,165 750,165 " marker-end="url(#arrowHead)"><title>Static borrow from s to r2</title></polyline>
        <use xlink:href="#functionDot" data-hash="2" x="690" y="185"><title>println!() reads from r1</title></use>
        <use xlink:href="#functionDot" data-hash="3" x="760" y="185"><title>println!() reads from r2</title></use>
        <polyline stroke-width="5" stroke="gray" points="690,185 630,185 " marker-end="url(#arrowHead)"><title>Return statically borrowed resource from r1 to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="760,185 630,185 " marker-end="url(#arrowHead)"><title>Return statically borrowed resource from r2 to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="620,245 820,245 " marker-end="url(#arrowHead)"><title>Mutable borrow from s to r3</title></polyline>
        <use xlink:href="#functionDot" data-hash="4" x="830" y="265"><title>println!() reads from r3</title></use>
        <polyline stroke-width="5" stroke="gray" points="830,265 630,265 " marker-end="url(#arrowHead)"><title>Return mutably borrowed resource from r3 to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="550" x2="550" y1="70" y2="320"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main(){ </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="1">s</tspan> = <tspan data-hash="5">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let <tspan data-hash="2">r1</tspan> = <tspan data-hash="1">&amp;s</tspan>; // no problem </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="3">r2</tspan> = <tspan data-hash="1">&amp;s</tspan>; // no problem </text>
        <text class="code" x="20" y="190">     <tspan data-hash="6">println!</tspan>("{} and {}", <tspan data-hash="2">r1</tspan>, <tspan data-hash="3">r2</tspan>); </text>
        <text class="code" x="20" y="210">     // <tspan data-hash="2">r1</tspan> and <tspan data-hash="3">r2</tspan> are no longer used after this point </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250">     let <tspan data-hash="4">r3</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; // no problem </text>
        <text class="code" x="20" y="270">     <tspan data-hash="6">println!</tspan>("{}", <tspan data-hash="4">r3</tspan>); </text>
        <text class="code" x="20" y="290">  </text>
        <text class="code" x="20" y="310"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_09_shared_and_unique_borrow/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_09.svg
   Compiling rrt v0.1.0 (/home/gluo/Develop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 0.79s
     Running `target/debug/examples/no_dangle`
s 1 2 OutOfScope
s 2 4 FullPrivilege
<svg width="750" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>no_dangle</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="440" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="440" x2="440" y1="105" y2="145"><title>s is the unique value that can access the data in memory; can only read data</title></line>
        <line class="colorless" stroke-width="8px" x1="440" x2="440" y1="110" y2="140"><title>s is the unique value that can access the data in memory; can only read data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="440" y="105"><title>obtains data from String::from() (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="440" y="145"><title>moves it's value to another value (s lost ownership)</title></use>
    </g>

    <g id="arrows">
        <text x="466" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="463,105 453,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="370" x2="370" y1="70" y2="180"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn <tspan data-hash="2">no_dangle</tspan>() -> String { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = <tspan data-hash="3">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="1">s</tspan> </text>
        <text class="code" x="20" y="170"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_12_no_dangle/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_12.svg
