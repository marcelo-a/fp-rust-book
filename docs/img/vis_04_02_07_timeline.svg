<svg width="350px" height="290px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="tl_04_02_07">

    <desc>scope_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 0.875em;
    font-family: "Open Sans", sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    fill: #6e6b5e;
    white-space: pre;
    font-family: "Source Code Pro", Consolas, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-size: 0.875em;
}

text.label {
    font-family: "Source Code Pro", Consolas, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-size: 0.875em;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow {
    stroke-width: 1.5;
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.functionIcon {
    paint-order: stroke;
    stroke-width: 3px;
    fill: var(--bg-color);
    font-size: 20px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

.functionLogo {
    font-size: 20px;
    font-style: italic;
    paint-order: stroke;
    stroke-width: 3px;
    fill: var(--bg-color) !important;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 0;
}

object.tl_panel {
    flex-grow: 1;
}

object.code_panel {
    flex-grow: 0;
}

.tooltip-trigger {
    cursor: help;
}

.tooltip-trigger:hover{
    filter: url(#glow);
}

/* hash based styling */
[data-hash="0"] {
    fill: #6e6b5e;
}

[data-hash="1"] {
    fill: #1893ff;
    stroke: #1893ff;
}

[data-hash="2"] {
    fill: #ff7f50;
    stroke: #ff7f50;
}

[data-hash="3"] {
    fill: #dc143c;
    stroke: #dc143c;
}

[data-hash="4"] {
    fill: #8635ff;
    stroke: #8635ff;
}

[data-hash="5"] {
    fill: #0a810a;
    stroke: #0a810a;
}

[data-hash="6"] {
    fill: #008080;
    stroke: #008080;
}

[data-hash="7"] {
    fill: #ff6cce;
    stroke: #ff6cce;
}

[data-hash="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash="9"] {
    fill: #b99f35;
    stroke: #b99f35;
}
        ]]>
        </style>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle cx="0" cy="0" r="5" fill="transparent"/>
             <text class="functionIcon" dx="-3.5" dy="0" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="0" refY="4"
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 8.5 4 L 0 8 z" fill="inherit"/>
        </marker>
        <!-- glow highlight filter -->
        <filter id="glow" x="-5000%" y="-5000%" width="10000%" height="10000%" filterUnits="userSpaceOnUse">
            <feComposite in="flood" result="mask" in2="SourceGraphic" operator="in"></feComposite>
            <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
            <feMerge>
                <feMergeNode in="coloredBlur"></feMergeNode>
                <feMergeNode in="coloredBlur"></feMergeNode>
                <feMergeNode in="coloredBlur"></feMergeNode>
                <feMergeNode in="SourceGraphic"></feMergeNode>
            </feMerge>
            <!-- increase brightness -->
            <feComponentTransfer>
                <feFuncR type="linear" slope="2"/>
                <feFuncG type="linear" slope="2"/>
                <feFuncB type="linear" slope="2"/>
            </feComponentTransfer>
        </filter>
    </defs>

    <g id="labels">
        <text x="250" y="90" style="text-anchor:middle" data-hash="3" class="label tooltip-trigger" data-tooltip-text="r2, immutable">r2<tspan stroke="none" data-tooltip-text="r2, immutable">|</tspan>*r2</text>
        <text x="160" y="90" style="text-anchor:middle" data-hash="2" class="label tooltip-trigger" data-tooltip-text="r1, immutable">r1<tspan stroke="none" data-tooltip-text="r1, immutable">|</tspan>*r1</text>
        <text x="70" y="90" style="text-anchor:middle" data-hash="1" class="label tooltip-trigger" data-tooltip-text="s, mutable">s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="165" data-tooltip-text="s is the unique value that can access the data in memory"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="185" y2="245" data-tooltip-text="s is the unique value that can access the data in memory"/>
        <path data-hash="2" class="hollow tooltip-trigger" style="fill:transparent;" d="M 158.2,165 V 185 h 3.5 V 165 h -3.5" data-tooltip-text="r1 is the unique value that can access the data in memory; can read and write data; cannot point to another piece of data"/>
        <path data-hash="3" class="hollow tooltip-trigger" style="fill:transparent;" d="M 248.2,245 V 245 h 3.5 V 245 h -3.5" data-tooltip-text="r2 is the unique value that can access the data in memory; can read and write data; cannot point to another piece of data"/>
    </g>

    <g id="ref_line">
        <path data-hash="2" class="solid tooltip-trigger" style="fill:transparent;" d="M 160 165 l 15 4 v 12 l -15 4" data-tooltip-text="can mutate the resource it refers to"/>
    </g>

    <g id="events">
        <circle cx="70" cy="105" r="5" data-hash="1" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <circle cx="70" cy="165" r="5" data-hash="1" class="tooltip-trigger" data-tooltip-text="mutably lends its data to r1 (s becomes un-readable until the end of r1's lifetime)"/>
        <circle cx="70" cy="185" r="5" data-hash="1" class="tooltip-trigger" data-tooltip-text="r1 is no longer a mutable referece of s, so we may read and write the data"/>
        <circle cx="70" cy="245" r="5" data-hash="1" class="tooltip-trigger" data-tooltip-text="mutably lends its data to r2 (s becomes un-readable until the end of r2's lifetime)"/>
        <circle cx="160" cy="165" r="5" data-hash="2" class="tooltip-trigger" data-tooltip-text="mutably borrows data from s (r1 gains read and write access to data)"/>
        <circle cx="160" cy="185" r="5" data-hash="2" class="tooltip-trigger" data-tooltip-text="returns borrowed data to s (r1's lifetime ends here)"/>
        <circle cx="160" cy="185" r="5" data-hash="2" class="tooltip-trigger" data-tooltip-text="r1 goes out of scope. The data is not dropped because r1 is not the owner."/>
        <circle cx="250" cy="245" r="5" data-hash="3" class="tooltip-trigger" data-tooltip-text="mutably borrows data from s (r2 gains read and write access to data)"/>
    </g>

    <g id="arrows">
        <text x="96" y="110" data-hash="4" class="functionLogo tooltip-trigger fn-trigger" data-tooltip-text="String::from()">f</text>
        <polyline stroke-width="5px" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
        <polyline stroke-width="5px" stroke="gray" points="70,165 150,165 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Mutable borrow from s to r1"/>
        <polyline stroke-width="5px" stroke="gray" points="160,185 80,185 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Return mutably borrowed resource from r1 to s"/>
        <polyline stroke-width="5px" stroke="gray" points="70,245 240,245 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Mutable borrow from s to r2"/>
    </g>

</svg>