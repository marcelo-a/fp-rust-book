<svg width="950" height="590px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>ownership_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="20">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="740" y="90" data-hash="6"><title>some_string, immutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="570" y="90" data-hash="1"><title>s, immutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="640" y="90" data-hash="4"><title>x, immutable</title>x</text>
        <text style="text-anchor:middle" class="code" x="850" y="90" data-hash="7"><title>some_integer, immutable</title>some_integer</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="570" x2="570" y1="105" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="570" x2="570" y1="110" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="640" x2="640" y1="205" y2="245"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="640" x2="640" y1="210" y2="240"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="640" x2="640" y1="245" y2="325"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="640" x2="640" y1="250" y2="320"><title>has read only privilege to the real data</title></line>
        <line data-hash="6" class="solid" x1="740" x2="740" y1="385" y2="405"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="740" x2="740" y1="390" y2="400"><title>has read only privilege to the real data</title></line>
        <line data-hash="6" class="solid" x1="740" x2="740" y1="405" y2="405"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="740" x2="740" y1="410" y2="400"><title>has read only privilege to the real data</title></line>
        <line data-hash="6" class="solid" x1="740" x2="740" y1="405" y2="425"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="740" x2="740" y1="410" y2="420"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="850" x2="850" y1="485" y2="505"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="850" x2="850" y1="490" y2="500"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="850" x2="850" y1="505" y2="505"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="850" x2="850" y1="510" y2="500"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="850" x2="850" y1="505" y2="525"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="850" x2="850" y1="510" y2="520"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="570" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="570" y="145"><title>Moving resource to takes_ownership()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="570" y="325"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="640" y="205"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="640" y="245"><title>Copying resource to makes_copy()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="640" y="325"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="740" y="385"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="740" y="405"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="740" y="405"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="740" y="425"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="850" y="485"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="850" y="505"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="850" y="505"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="850" y="525"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="596" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="593,105 583,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <text x="535" y="150" font-size = "20" font-style="italic" class="heavy" ><title>takes_ownership()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="565,145 555,145 " marker-end="url(#arrowHead)"><title>Move from s to the parameter of takes_ownership()</title></polyline>
        <text x="605" y="250" font-size = "20" font-style="italic" class="heavy" ><title>makes_copy()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="635,245 625,245 " marker-end="url(#arrowHead)"><title>Duplicate from x to the parameter of makes_copy()</title></polyline>
        <use xlink:href="#functionDot" data-hash="6" x="740" y="405"><title>println!() reads from some_string</title></use>
        <use xlink:href="#functionDot" data-hash="7" x="850" y="505"><title>println!() reads from some_integer</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="500" x2="500" y1="70" y2="540"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = <tspan data-hash="2">String::from</tspan>("hello");  // s comes into scope </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="3">takes_ownership</tspan>(<tspan data-hash="1">s</tspan>);             // s's value moves into the function... </text>
        <text class="code" x="20" y="170">                                     // ... and so is no longer valid here </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="4">x</tspan> = 5;                      // x comes into scope </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250">     <tspan data-hash="5">makes_copy</tspan>(<tspan data-hash="4">x</tspan>);                  // x would move into the function, </text>
        <text class="code" x="20" y="270">                                     // but i32 is Copy, so it’s okay to still </text>
        <text class="code" x="20" y="290">                                     // use x afterward </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> } // Here, x goes out of scope, then s. But because s's value was moved, nothing </text>
        <text class="code" x="20" y="350">   // special happens. </text>
        <text class="code" x="20" y="370">  </text>
        <text class="code" x="20" y="390"> fn <tspan data-hash="3">takes_ownership</tspan>(<tspan data-hash="6">some_string</tspan>: String) { // some_string comes into scope </text>
        <text class="code" x="20" y="410">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="6">some_string</tspan>); </text>
        <text class="code" x="20" y="430"> } // Here, some_string goes out of scope and `drop` is called. The backing </text>
        <text class="code" x="20" y="450">   // memory is freed. </text>
        <text class="code" x="20" y="470">  </text>
        <text class="code" x="20" y="490"> fn <tspan data-hash="5">makes_copy</tspan>(<tspan data-hash="7">some_integer</tspan>: i32) { // some_integer comes into scope </text>
        <text class="code" x="20" y="510">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="7">some_integer</tspan>); </text>
        <text class="code" x="20" y="530"> } // Here, some_integer goes out of scope. Nothing special happens. </text>
    </g>

   
</svg>