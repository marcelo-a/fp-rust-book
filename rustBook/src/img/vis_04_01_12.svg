<svg width="968" height="710px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>return_values</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="20">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="558" y="90" data-hash="7"><title>a_string, immutable</title>a_string</text>
        <text style="text-anchor:middle" class="code" x="628" y="90" data-hash="5"><title>s3, immutable</title>s3</text>
        <text style="text-anchor:middle" class="code" x="798" y="90" data-hash="3"><title>some_string, immutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="868" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="698" y="90" data-hash="4"><title>s2, immutable</title>s2</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="868" x2="868" y1="108" y2="268"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="868" x2="868" y1="113" y2="263"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="798" x2="798" y1="408" y2="448"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="798" x2="798" y1="413" y2="443"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="698" x2="698" y1="168" y2="208"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="698" x2="698" y1="173" y2="203"><title>has read only privilege to the real data</title></line>
        <line data-hash="5" class="solid" x1="628" x2="628" y1="208" y2="268"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="628" x2="628" y1="213" y2="263"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="558" x2="558" y1="568" y2="628"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="558" x2="558" y1="573" y2="623"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="868" y="108"><title>Acquiring resource from gives_ownership()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="868" y="268"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="798" y="408"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="798" y="448"><title>Moving resource</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="798" y="508"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="698" y="168"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="698" y="208"><title>Moving resource to takes_and_gives_back()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="698" y="268"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="628" y="208"><title>Acquiring resource from takes_and_gives_back()</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="628" y="268"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="558" y="568"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="558" y="628"><title>Moving resource</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="558" y="648"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="894" y="113" font-size = "20" font-style="italic" class="heavy" ><title>gives_ownership()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="891,108 881,108 " marker-end="url(#arrowHead)"><title>Move from the return value of gives_ownership() to s1</title></polyline>
        <text x="663" y="213" font-size = "20" font-style="italic" class="heavy" ><title>takes_and_gives_back()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="693,208 683,208 " marker-end="url(#arrowHead)"><title>Move from s2 to the parameter of takes_and_gives_back()</title></polyline>
        <text x="654" y="213" font-size = "20" font-style="italic" class="heavy" ><title>takes_and_gives_back()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="651,208 641,208 " marker-end="url(#arrowHead)"><title>Move from the return value of takes_and_gives_back() to s3</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="488" x2="488" y1="70" y2="660"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="2">gives_ownership</tspan>();         // gives_ownership moves its return </text>
        <text class="code" x="20" y="130">                                         // value into s1 </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="4">s2</tspan> = String::from("hello");     // s2 comes into scope </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="5">s3</tspan> = <tspan data-hash="6">takes_and_gives_back</tspan>(<tspan data-hash="4">s2</tspan>);  // s2 is moved into </text>
        <text class="code" x="20" y="230">                                         // takes_and_gives_back, which also </text>
        <text class="code" x="20" y="250">                                         // moves its return value into s3 </text>
        <text class="code" x="20" y="270"> } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was </text>
        <text class="code" x="20" y="290">   // moved, so nothing happens. s1 goes out of scope and is dropped. </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> fn <tspan data-hash="2">gives_ownership</tspan>() -> String {             // gives_ownership will move its </text>
        <text class="code" x="20" y="350">                                              // return value into the function </text>
        <text class="code" x="20" y="370">                                              // that calls it </text>
        <text class="code" x="20" y="390">  </text>
        <text class="code" x="20" y="410">     let <tspan data-hash="3">some_string</tspan> = String::from("hello"); // some_string comes into scope </text>
        <text class="code" x="20" y="430">  </text>
        <text class="code" x="20" y="450">     <tspan data-hash="3">some_string</tspan>                             // some_string is returned and </text>
        <text class="code" x="20" y="470">                                              // moves out to the calling </text>
        <text class="code" x="20" y="490">                                              // function </text>
        <text class="code" x="20" y="510"> } </text>
        <text class="code" x="20" y="530">  </text>
        <text class="code" x="20" y="550"> // takes_and_gives_back will take a String and return one </text>
        <text class="code" x="20" y="570"> fn <tspan data-hash="6">takes_and_gives_back</tspan>(<tspan data-hash="7">a_string</tspan>: String) -> String { // a_string comes into </text>
        <text class="code" x="20" y="590">                                                       // scope </text>
        <text class="code" x="20" y="610">  </text>
        <text class="code" x="20" y="630">     <tspan data-hash="7">a_string</tspan>  // a_string is returned and moves out to the calling function </text>
        <text class="code" x="20" y="650"> } </text>
    </g>

   
</svg>