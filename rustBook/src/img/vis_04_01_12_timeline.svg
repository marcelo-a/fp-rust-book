<svg width="480px" height="710px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>return_values</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="310" y="90" data-hash="4"><title>some_string, immutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="210" y="90" data-hash="3"><title>s3, immutable</title>s3</text>
        <text style="text-anchor:middle" class="code" x="380" y="90" data-hash="5"><title>a_string, immutable</title>a_string</text>
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="265" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="260" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="165" y2="205" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="170" y2="200" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="205" y2="265" data-tooltip-text="s3 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="210" y2="260" data-tooltip-text="s3 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="310" x2="310" y1="405" y2="445" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="310" x2="310" y1="410" y2="440" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="5" class="solid tooltip-trigger" x1="380" x2="380" y1="565" y2="625" data-tooltip-text="a_string is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="380" x2="380" y1="570" y2="620" data-tooltip-text="a_string is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from gives_ownership() (s1's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="265" class="tooltip-trigger" data-tooltip-text="s1 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="obtains data from another value (s2's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="205" class="tooltip-trigger" data-tooltip-text="moves it's value to takes_and_gives_back() (s2 lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="265" class="tooltip-trigger" data-tooltip-text="s2 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="205" class="tooltip-trigger" data-tooltip-text="obtains data from takes_and_gives_back() (s3's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="265" class="tooltip-trigger" data-tooltip-text="s3 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="4" x="310" y="405" class="tooltip-trigger" data-tooltip-text="obtains data from another value (some_string's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="4" x="310" y="445" class="tooltip-trigger" data-tooltip-text="moves it's value to another value (some_string lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="4" x="310" y="505" class="tooltip-trigger" data-tooltip-text="some_string goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="5" x="380" y="565" class="tooltip-trigger" data-tooltip-text="obtains data from another value (a_string's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="5" x="380" y="625" class="tooltip-trigger" data-tooltip-text="moves it's value to another value (a_string lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="5" x="380" y="645" class="tooltip-trigger" data-tooltip-text="a_string goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="gives_ownership()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of gives_ownership() to s1"/>
        <text x="105" y="210" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="takes_and_gives_back()">f</text>        <polyline stroke-width="5" stroke="gray" points="135,205 125,205 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from s2 to the parameter of takes_and_gives_back()"/>
        <text x="236" y="210" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="takes_and_gives_back()">f</text>        <polyline stroke-width="5" stroke="gray" points="233,205 223,205 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of takes_and_gives_back() to s3"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>