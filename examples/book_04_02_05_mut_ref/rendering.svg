<svg width="1300px" height="700px" viewBox="-300 0 1000 700"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>mut_ref</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
svg {
    background-color: #232323;
}

text {
    fill: #cccccc;
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 12px;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* function related styling */
#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}
/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: #232323;
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: gray;
    fill: gray;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #5b76fc;
    stroke: #5b76fc;
}

[data-hash*="2"] {
    fill: #2aad09;
    stroke: #2aad09;
}

[data-hash*="3"] {
    fill: #df5f3f;
    stroke: #df5f3f;
}

[data-hash*="4"] {
    fill: #fff300;
    stroke: #fff300;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #00ffff;
    stroke: #00ffff;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}

[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}

        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text dx="-6" dy="2"  font-size="16"  font-style="italic"
              dominant-baseline="middle" text-anchor="middle" 
              color="white" stroke="white" fill="white">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="beige">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="heading" x="-300" y="30">Visualization of Rust mut_ref</text>
        <text id="caption" x="-300" y="50">Hover over timeline event to get more information; click on variables to see its timeline.</text>
    </g>

    <g id="labels">
        <text x="-180" y="80"></text><text dominant-baseline="middle" text-anchor="middle" class="code" x="-180" y="80" data-hash="1"><title>s, mutable</title>s</text>
        <text x="-110" y="80"></text><text dominant-baseline="middle" text-anchor="middle" class="code" x="-110" y="80" data-hash="4"><title>some_string, mutable</title>some_string</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="-180" x2="-180" y1="100" y2="140"><title>has read and write privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="-180" x2="-180" y1="140" y2="140"><title>has read only privilege to the real data</title></line>
        <line stroke="#232323" stroke-width="3px" x1="-180" x2="-180" y1="145" y2="135"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="-180" x2="-180" y1="140" y2="160"><title>has read and write privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="-110" x2="-110" y1="200" y2="220"><title>has read and write privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="-110" x2="-110" y1="220" y2="220"><title>has read only privilege to the reference itself</title></line>
        <line stroke="#232323" stroke-width="3px" x1="-110" x2="-110" y1="225" y2="215"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="-110" x2="-110" y1="220" y2="240"><title>has read and write privilege to the reference itself</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="-180" y="100"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="-180" y="140"><title>Partially lends resource to change()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="-180" y="140"><title>Partially reacquires resource from change()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="-180" y="160"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="-110" y="200"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="-110" y="220"><title>Partially lends resource to push_str()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="-110" y="220"><title>Partially reacquires resource from push_str()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="-110" y="240"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="-154" y="105" font-size = "20" font-style = "italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="2.5" stroke="beige" points="-157,100 -167,100 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of String::from() to s</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="-180" y="140"><title>Pass to change() by static reference</title></use>
        <use xlink:href="#functionDot" data-hash="4" x="-110" y="220"><title>Pass to push_str() by static reference</title></use>
    </g>

    <g id="dividers">
            <line class="solid" stroke="beige" x1="-20" x2="-20" y1="80" y2="400"/>
    </g>

    <g id="code">
        <text class="code" x="0" y="80"> fn main() { </text>
        <text class="code" x="0" y="100">     let mut <tspan data-hash="1">s</tspan> = <tspan data-hash="2">String::from</tspan>("hello"); </text>
        <text class="code" x="0" y="120">  </text>
        <text class="code" x="0" y="140">     <tspan data-hash="3">change</tspan>(&amp;mut <tspan data-hash="1">s</tspan>); </text>
        <text class="code" x="0" y="160"> } </text>
        <text class="code" x="0" y="180">  </text>
        <text class="code" x="0" y="200"> fn change(<tspan data-hash="4">some_string</tspan>: &amp;mut String) { </text>
        <text class="code" x="0" y="220">     <tspan data-hash="4">some_string</tspan>.<tspan data-hash="5">push_str</tspan>(", world"); </text>
        <text class="code" x="0" y="240"> } </text>
    </g>

   
</svg>