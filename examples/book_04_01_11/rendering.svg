<svg width="1800px" height="600px" viewBox="-300 0 1500 700"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>book_04_01_11</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
svg {
    background-color: #232323;
}

text {
    fill: #cccccc;
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 12px;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: #232323;
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: gray;
    fill: gray;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33ff00;
    stroke: #33ff00;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #fff300;
    stroke: #fff300;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #00ffff;
    stroke: #00ffff;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}

        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="beige">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="heading" x="-300" y="30">Visualization of Rust book_04_01_11</text>
        <text id="caption" x="-300" y="50">Hover over timeline event to get more information; click on variables to see its timeline.</text>
    </g>

    <g id="labels">
        <text class="code" x="-220" y="80" data-hash="4">s2</text>
        <text class="code" x="-320" y="80" data-hash="3">some_string</text>
        <text class="code" x="-80" y="80" data-hash="7">a_string</text>
        <text class="code" x="-390" y="80" data-hash="1">s1</text>
        <text class="code" x="-150" y="80" data-hash="5">s3</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="-390" x2="-390" y1="100" y2="260"><title>has read only privilege to the real data</title></line>
        <line stroke="#232323" stroke-width="3px" x1="-390" x2="-390" y1="105" y2="255"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="-320" x2="-320" y1="400" y2="440"><title>has read only privilege to the real data</title></line>
        <line stroke="#232323" stroke-width="3px" x1="-320" x2="-320" y1="405" y2="435"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="-220" x2="-220" y1="160" y2="200"><title>has read only privilege to the real data</title></line>
        <line stroke="#232323" stroke-width="3px" x1="-220" x2="-220" y1="165" y2="195"><title>has read only privilege to the real data</title></line>
        <line data-hash="5" class="solid" x1="-150" x2="-150" y1="200" y2="260"><title>has read only privilege to the real data</title></line>
        <line stroke="#232323" stroke-width="3px" x1="-150" x2="-150" y1="205" y2="255"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="-80" x2="-80" y1="560" y2="620"><title>has read only privilege to the real data</title></line>
        <line stroke="#232323" stroke-width="3px" x1="-80" x2="-80" y1="565" y2="615"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="arrows">
        <text x="-364" y="105" class="heavy" ><title>gives_ownership</title>F</text>        <polyline stroke-width="2.5" stroke="beige" points="-367,100 -377,100 " marker-end="url(#arrowHead)"><title>Move from the return value of gives_ownership to s1</title></polyline>
        <text x="-255" y="205" class="heavy" ><title>takes_and_gives_back</title>F</text>        <polyline stroke-width="2.5" stroke="beige" points="-225,200 -235,200 " marker-end="url(#arrowHead)"><title>Move from s2 to the parameter of takes_and_gives_back</title></polyline>
        <text x="-124" y="205" class="heavy" ><title>takes_and_gives_back</title>F</text>        <polyline stroke-width="2.5" stroke="beige" points="-127,200 -137,200 " marker-end="url(#arrowHead)"><title>Move from the return value of takes_and_gives_back to s3</title></polyline>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="-390" y="100"><title>Acquiring resource from gives_ownership</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="-390" y="260"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="-320" y="400"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="-320" y="440"><title>Moving resource</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="-320" y="500"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="-220" y="160"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="-220" y="200"><title>Moving resource to takes_and_gives_back</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="-220" y="260"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="-150" y="200"><title>Acquiring resource from takes_and_gives_back</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="-150" y="260"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="-80" y="560"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="-80" y="620"><title>Moving resource</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="-80" y="640"><title>Goes out of scope</title></use>
    </g>

    <g id="dividers">
            <line class="solid" stroke="beige" x1="-20" x2="-20" y1="80" y2="400"/>
    </g>

    <g id="code">
        <text class="code" x="0" y="80"> fn main() { </text>
        <text class="code" x="0" y="100">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="2">gives_ownership</tspan>();         // gives_ownership moves its return </text>
        <text class="code" x="0" y="120">                                         // value into s1 </text>
        <text class="code" x="0" y="140">  </text>
        <text class="code" x="0" y="160">     let <tspan data-hash="4">s2</tspan> = String::from("hello");     // s2 comes into scope </text>
        <text class="code" x="0" y="180">  </text>
        <text class="code" x="0" y="200">     let <tspan data-hash="5">s3</tspan> = <tspan data-hash="6">takes_and_gives_back</tspan>(<tspan data-hash="4">s2</tspan>);  // s2 is moved into </text>
        <text class="code" x="0" y="220">                                         // takes_and_gives_back, which also </text>
        <text class="code" x="0" y="240">                                         // moves its return value into s3 </text>
        <text class="code" x="0" y="260"> } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was </text>
        <text class="code" x="0" y="280">   // moved, so nothing happens. s1 goes out of scope and is dropped. </text>
        <text class="code" x="0" y="300">  </text>
        <text class="code" x="0" y="320"> fn <tspan data-hash="2">gives_ownership</tspan>() -> String {             // gives_ownership will move its </text>
        <text class="code" x="0" y="340">                                              // return value into the function </text>
        <text class="code" x="0" y="360">                                              // that calls it </text>
        <text class="code" x="0" y="380">  </text>
        <text class="code" x="0" y="400">     let <tspan data-hash="3">some_string</tspan> = String::from("hello"); // some_string comes into scope </text>
        <text class="code" x="0" y="420">  </text>
        <text class="code" x="0" y="440">     <tspan data-hash="3">some_string</tspan>                             // some_string is returned and </text>
        <text class="code" x="0" y="460">                                              // moves out to the calling </text>
        <text class="code" x="0" y="480">                                              // function </text>
        <text class="code" x="0" y="500"> } </text>
        <text class="code" x="0" y="520">  </text>
        <text class="code" x="0" y="540"> // takes_and_gives_back will take a String and return one </text>
        <text class="code" x="0" y="560"> fn <tspan data-hash="6">takes_and_gives_back</tspan>(<tspan data-hash="7">a_string</tspan>: String) -> String { // a_string comes into </text>
        <text class="code" x="0" y="580">                                                       // scope </text>
        <text class="code" x="0" y="600">  </text>
        <text class="code" x="0" y="620">     <tspan data-hash="7">a_string</tspan>  // a_string is returned and moves out to the calling function </text>
        <text class="code" x="0" y="640"> } </text>
    </g>

   
</svg>