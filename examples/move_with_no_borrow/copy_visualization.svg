<svg width="1800px" height="600px" viewBox="-100 0 1500 600"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <title>SVG demonstration</title>
    <desc>Mozilla CSS Getting Started - SVG demonstration</desc>

    <defs>
    <style type="text/css">
        <![CDATA[
            /* $Color1: #3355ff; */
            /* $Color2: #cccccc; */

            /* general setup */
            svg {
                background-color: #232323;
            }

            text {
                fill: #cccccc;
            }
            
            #dashLine { 
                stroke-width: 3;
                stroke-dasharray: 3;
            }
            
            #heading {
                font-size: 24px;
                font-weight: bold;
            }
            
            #caption {
                font-size: 12px;
            }
            
            /* code related styling */
            text.code {
                white-space: pre;
                font-family: "monospace";
                dominant-baseline: middle;
            }

            /* event related styling */
            #eventDot:hover {
                transform: scale(1.5);
            }

            #eventDot {
                transition: all 0.3s;
            }

            /* timeline/event interaction styling */
            line.solid {
                stroke-width: 3px;
            }

            /* hash based styling */
            [data-hash*="1"] {
                fill: #3355ff;
                stroke: #3355ff;
            }

            [data-hash*="2"] {
                fill: #33ff00;
                stroke: #33ff00;
            }

            [data-hash*="3"] {
                fill: #ff3300;
                stroke: #ff3300;
            }
        ]]>
    </style>
    <g id="segment" class="segment">
            <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z"/>
            <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10"/>
    </g>
    <g id="quadrant">
            <use xlink:href="#segment"/>
            <use xlink:href="#segment" transform="rotate(18)"/>
            <use xlink:href="#segment" transform="rotate(36)"/>
            <use xlink:href="#segment" transform="rotate(54)"/>
            <use xlink:href="#segment" transform="rotate(72)"/>
    </g>
    <g id="petals">
            <use xlink:href="#quadrant"/>
            <use xlink:href="#quadrant" transform="rotate(90)"/>
            <use xlink:href="#quadrant" transform="rotate(180)"/>
            <use xlink:href="#quadrant" transform="rotate(270)"/>
    </g>
    <radialGradient id="fade" cx="0" cy="0" r="200"
            gradientUnits="userSpaceOnUse">
            <stop id="fade-stop-1" offset="33%"/>
            <stop id="fade-stop-2" offset="95%"/>
    </radialGradient>
    <!-- Useful constructs -->
    <circle id="eventDot" cx="0" cy="0" r="5"/>
    <marker id="arrowHead" viewBox="0 0 10 10"
        refX="1" refY="5" 
        markerUnits="strokeWidth"
        markerWidth="10" markerHeight="10"
        orient="auto" fill="beige">
        <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
    </marker>        
    </defs>
        
        <g id="title">
            <text id="heading" x="-100" y="30">Visualization of Rust Lifetime with no Borrow</text>
            <text id="caption" x="-100" y="50">Hover over timeline event to get more information; click on variables to see its timeline.</text>
        </g>

        <g id="events">
            <!-- event of x is aligned at x=-100 -->
            <text class="code" x="-100" y="80" data-hash="1" text-anchor="middle">x</text>
            <use xlink:href="#eventDot" data-hash="1" x="-100" y="140"/>
            <use xlink:href="#eventDot" data-hash="1" x="-100" y="160"/>
            <use xlink:href="#eventDot" data-hash="1" x="-100" y="220"/>
            
            <!-- event of y is aligned at x=-70 -->
            <text class="code" x="-70" y="80" data-hash="2" text-anchor="middle">y</text>
            <use xlink:href="#eventDot" data-hash="2" x="-70" y="100"/>
            <use xlink:href="#eventDot" data-hash="2" x="-70" y="140"/>

            <!-- event of z is aligned at x=-40 -->
            <text class="code" x="-40" y="80" data-hash="3" text-anchor="middle">z</text>
            <use xlink:href="#eventDot" data-hash="3" x="-40" y="120"/>
        </g>

        <g id="timelines">
            <line class="solid" data-hash="1" x1="-100" x2="-100" y1="140" y2="160"/>
            <line class="solid" data-hash="2" x1="-70" x2="-70" y1="100" y2="140"/>  
            <line id="dashLine" data-hash="1" x1="-100" y1="160" x2="-100" y2="220"/>
            <polyline strokeWidth="3" stroke="beige" points="-70,140 -85,140 " marker-end="url(#arrowHead)"/>
            <line x1="-40" x2="-40" y1="120" y2="200" data-hash="3" stroke-width="3" stroke-linecap="round" stroke-dasharray="1, 6"/>
        </g>

        <g id="dividers">
              <line class="solid" stroke="beige" x1="-20" x2="-20" y1="80" y2="400"/>
        </g>

        <g id="code">
                <text class="code" x="0" y="80">fn fun() {</text>
                <text class="code" x="0" y="100">        let <tspan data-hash="2">y</tspan> = String::from("y");</text>
                <text class="code" x="0" y="120">        let <tspan data-hash="3">z</tspan> = String::from("z");</text>
                <text class="code" x="0" y="140">        let <tspan data-hash="1">x</tspan> = <tspan data-hash="2">y</tspan>;</text>
                <text class="code" x="0" y="160">        println!("{}", <tspan data-hash="1">x</tspan>);                // pretend nothing happens inside a macro</text>
                <text class="code" x="0" y="180">        // println!("{}", <tspan data-hash="2">y</tspan>);             // Uncomment this line incurs error[E0382]: borrow of moved value: `<tspan data-hash="2">y</tspan>`</text>
                <text class="code" x="0" y="200">        // println!("{}", <tspan data-hash="3">z</tspan>);             // Uncomment this line incurs error[E0382]: borrow of moved value: `<tspan data-hash="3">z</tspan>`</text>
                <text class="code" x="0" y="220">}</text>
                <text class="code" x="0" y="240">fn main() {</text>
                <text class="code" x="0" y="260">     fun();</text>
                <text class="code" x="0" y="280">}</text>
        </g>
</svg>