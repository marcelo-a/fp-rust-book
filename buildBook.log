Running the following examples: 
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.42s
     Running `target/debug/examples/one_var`
s 1 2 OutOfScope
s 2 3 FullPrivilege
<svg width="750" height="190px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>one_var</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="328" y="90" data-hash="4"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="4" class="solid" x1="328" x2="328" y1="105" y2="125"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="328" x2="328" y1="110" y2="120"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="4" x="328" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="328" y="125"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="354" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="351,105 341,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="258" x2="258" y1="70" y2="140"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_01_one_var/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_01.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

warning: unused import: `Function`
 --> examples/book_04_01_02_scope/main.rs:1:76
  |
1 | use rrt_lib::data::{ExternalEvent, LifetimeTrait, ResourceOwner, Variable, Function, VisualizationData, Visualizable};
  |                                                                            ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.20s
     Running `target/debug/examples/scope`
s 1 3 OutOfScope
s 3 6 FullPrivilege
<svg width="750" height="270px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="636" y="90" data-hash="4"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="4" class="solid" x1="636" x2="636" y1="125" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="636" x2="636" y1="130" y2="180"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="4" x="636" y="125"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="636" y="185"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="566" x2="566" y1="70" y2="220"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     {                      // s is not valid here, it’s not yet declared </text>
        <text class="code" x="20" y="130">         let <tspan data-hash="4">s</tspan> = "hello";   // s is valid from this point forward </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">         // do stuff with s </text>
        <text class="code" x="20" y="190">     }                      // this scope is now over, and s is no longer valid </text>
        <text class="code" x="20" y="210"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_02_scope/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_02.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/examples/string_from`
s 1 2 OutOfScope
<svg width="750" height="170px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_from</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="300" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="300" y="105"><title>Acquiring resource from String::from()</title></use>
    </g>

    <g id="arrows">
        <text x="326" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="323,105 313,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="230" x2="230" y1="70" y2="120"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_03_string_from/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_03.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.17s
     Running `target/debug/examples/reference`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 4 RevokedPrivilege
s 4 6 FullPrivilege
s 6 6 PartialPrivilege
s 6 7 FullPrivilege
<svg width="750" height="270px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="587" y="90" data-hash="1"><title>s, mutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="587" x2="587" y1="105" y2="145"><title>has read and write privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="587" x2="587" y1="145" y2="185"><title>has read and write privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="587" x2="587" y1="185" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="587" x2="587" y1="190" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="587" x2="587" y1="185" y2="205"><title>has read and write privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="587" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="587" y="145"><title>Mutable lend to push_str()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="587" y="145"><title>Fully reacquires resource from push_str()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="587" y="185"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="587" y="185"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="587" y="205"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="613" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="610,105 600,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="587" y="145"><title>push_str() reads from/writes to s</title></use>
        <use xlink:href="#functionDot" data-hash="1" x="587" y="185"><title>println!() reads from s</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="517" x2="517" y1="70" y2="220"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="4">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="4">s</tspan>.push_str(", world!"); // push_str() appends a literal to a String </text>
        <text class="code" x="20" y="170">  </text>
        <text class="code" x="20" y="190">     println!("{}", <tspan data-hash="4">s</tspan>); // This will print `hello, world!` </text>
        <text class="code" x="20" y="210"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_04_reference/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_04.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

warning: unused import: `Function`
 --> examples/book_04_01_05_scope2/main.rs:1:76
  |
1 | use rrt_lib::data::{ExternalEvent, LifetimeTrait, ResourceOwner, Variable, Function, VisualizationData, Visualizable};
  |                                                                            ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.21s
     Running `target/debug/examples/scope2`
s 1 3 OutOfScope
s 3 6 FullPrivilege
<svg width="750" height="290px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="629" y="90" data-hash="4"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="4" class="solid" x1="629" x2="629" y1="125" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="629" x2="629" y1="130" y2="180"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="4" x="629" y="125"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="629" y="185"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="559" x2="559" y1="70" y2="240"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     { </text>
        <text class="code" x="20" y="130">         let <tspan data-hash="4">s</tspan> = String::from("hello"); // s is valid from this point forward </text>
        <text class="code" x="20" y="150">      </text>
        <text class="code" x="20" y="170">         // do stuff with s </text>
        <text class="code" x="20" y="190">     }                                  // this scope is now over, and s is no </text>
        <text class="code" x="20" y="210">                                        // longer valid </text>
        <text class="code" x="20" y="230"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_05_scope2/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_05.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

warning: unused import: `Function`
 --> examples/book_04_01_06_int_copy/main.rs:1:76
  |
1 | use rrt_lib::data::{ExternalEvent, LifetimeTrait, ResourceOwner, Variable, Function, VisualizationData, Visualizable};
  |                                                                            ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.29s
     Running `target/debug/examples/int_copy`
x 1 2 OutOfScope
x 2 3 FullPrivilege
x 3 4 FullPrivilege
y 1 3 OutOfScope
y 3 4 FullPrivilege
<svg width="750" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>int_copy</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="258" y="90" data-hash="4"><title>y, immutable</title>y</text>
        <text style="text-anchor:middle" class="code" x="188" y="90" data-hash="3"><title>x, immutable</title>x</text>
    </g>

    <g id="timelines">
        <line data-hash="3" class="solid" x1="188" x2="188" y1="105" y2="125"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="188" x2="188" y1="110" y2="120"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="188" x2="188" y1="125" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="188" x2="188" y1="130" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="258" x2="258" y1="125" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="258" x2="258" y1="130" y2="140"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="3" x="188" y="105"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="188" y="125"><title>Copying resource to y</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="188" y="145"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="258" y="125"><title>Acquiring resource from x</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="258" y="145"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <polyline stroke-width="5" stroke="gray" points="188,125 248,125 " marker-end="url(#arrowHead)"><title>Duplicate from x to y</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="118" x2="118" y1="70" y2="160"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="3">x</tspan> = 5; </text>
        <text class="code" x="20" y="130">     let <tspan data-hash="4">y</tspan> = x; </text>
        <text class="code" x="20" y="150"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_06_int_copy/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_06.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.26s
     Running `target/debug/examples/string_move`
s1 1 2 OutOfScope
s1 2 3 FullPrivilege
s2 1 3 OutOfScope
<svg width="750" height="190px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_move</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="307" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="377" y="90" data-hash="3"><title>s2, immutable</title>s2</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="307" x2="307" y1="105" y2="125"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="307" x2="307" y1="110" y2="120"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="307" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="307" y="125"><title>Moving resource to s2</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="377" y="125"><title>Acquiring resource from s1</title></use>
    </g>

    <g id="arrows">
        <text x="333" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="330,105 320,105 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of String::from() to s1</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="307,125 367,125 " marker-end="url(#arrowHead)"><title>Move from s1 to s2</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="237" x2="237" y1="70" y2="140"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = <tspan data-hash="2">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130"> let <tspan data-hash="3">s2</tspan> = <tspan data-hash="1">s1</tspan>; </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_07_string_move/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_07.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.20s
     Running `target/debug/examples/string_clone`
s1 1 2 OutOfScope
s1 2 3 FullPrivilege
s1 3 3 PartialPrivilege
s1 3 5 FullPrivilege
s1 5 5 PartialPrivilege
s2 1 3 OutOfScope
s2 3 5 FullPrivilege
s2 5 5 PartialPrivilege
<svg width="750" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_clone</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="419" y="90" data-hash="3"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="349" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="349" x2="349" y1="105" y2="125"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="349" x2="349" y1="110" y2="120"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="349" x2="349" y1="125" y2="125"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="349" x2="349" y1="130" y2="120"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="349" x2="349" y1="125" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="349" x2="349" y1="130" y2="160"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="349" x2="349" y1="165" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="349" x2="349" y1="170" y2="160"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="419" x2="419" y1="125" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="419" x2="419" y1="130" y2="160"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="419" x2="419" y1="165" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="419" x2="419" y1="170" y2="160"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="349" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="349" y="125"><title>Partially lends resource to clone()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="349" y="125"><title>Partially reacquires resource from clone()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="349" y="165"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="349" y="165"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="419" y="125"><title>Acquiring resource from clone()</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="419" y="165"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="419" y="165"><title>Partially reacquires resource from println!()</title></use>
    </g>

    <g id="arrows">
        <text x="375" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="372,105 362,105 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of String::from() to s1</title></polyline>
        <text x="445" y="130" font-size = "20" font-style="italic" class="heavy" ><title>clone()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="442,125 432,125 " marker-end="url(#arrowHead)"><title>Move from the return value of clone() to s2</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="349" y="125"><title>clone() reads from s1</title></use>
        <use xlink:href="#functionDot" data-hash="1" x="349" y="165"><title>println!() reads from s1</title></use>
        <use xlink:href="#functionDot" data-hash="3" x="419" y="165"><title>println!() reads from s2</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="279" x2="279" y1="70" y2="180"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = <tspan data-hash="2">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130"> let <tspan data-hash="3">s2</tspan> = <tspan data-hash="1">s1</tspan>.<tspan data-hash="4">clone</tspan>(); </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170"> <tspan data-hash="5">println!</tspan>("s1 = {}, s2 = {}", <tspan data-hash="1">s1</tspan>, <tspan data-hash="2">s2</tspan>); </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_09_string_clone/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_09.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.20s
     Running `target/debug/examples/int_copy_2`
x 1 2 OutOfScope
x 2 3 FullPrivilege
x 3 5 FullPrivilege
x 5 5 PartialPrivilege
x 5 6 FullPrivilege
y 1 3 OutOfScope
y 3 5 FullPrivilege
y 5 5 PartialPrivilege
y 5 6 FullPrivilege
<svg width="750" height="250px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>int_copy_2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="419" y="90" data-hash="4"><title>y, immutable</title>y</text>
        <text style="text-anchor:middle" class="code" x="349" y="90" data-hash="3"><title>x, immutable</title>x</text>
    </g>

    <g id="timelines">
        <line data-hash="3" class="solid" x1="349" x2="349" y1="105" y2="125"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="349" x2="349" y1="110" y2="120"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="349" x2="349" y1="125" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="349" x2="349" y1="130" y2="160"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="349" x2="349" y1="165" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="349" x2="349" y1="170" y2="160"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="349" x2="349" y1="165" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="349" x2="349" y1="170" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="419" x2="419" y1="125" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="419" x2="419" y1="130" y2="160"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="419" x2="419" y1="165" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="419" x2="419" y1="170" y2="160"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="419" x2="419" y1="165" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="419" x2="419" y1="170" y2="180"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="3" x="349" y="105"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="349" y="125"><title>Copying resource to y</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="349" y="165"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="349" y="165"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="349" y="185"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="419" y="125"><title>Acquiring resource from x</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="419" y="165"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="419" y="165"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="419" y="185"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <polyline stroke-width="5" stroke="gray" points="349,125 409,125 " marker-end="url(#arrowHead)"><title>Duplicate from x to y</title></polyline>
        <use xlink:href="#functionDot" data-hash="3" x="349" y="165"><title>println!() reads from x</title></use>
        <use xlink:href="#functionDot" data-hash="4" x="419" y="165"><title>println!() reads from y</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="279" x2="279" y1="70" y2="200"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="3">x</tspan> = 5; </text>
        <text class="code" x="20" y="130">     let <tspan data-hash="4">y</tspan> = <tspan data-hash="3">x</tspan>; </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">     println!("x = {}, y = {}", <tspan data-hash="3">x</tspan>, <tspan data-hash="4">y</tspan>); </text>
        <text class="code" x="20" y="190"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_10_int_copy_2/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_10.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.17s
     Running `target/debug/examples/ownership_function`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 13 ResourceMoved
x 1 7 OutOfScope
x 7 9 FullPrivilege
x 9 13 FullPrivilege
some_string 1 16 OutOfScope
some_string 16 17 FullPrivilege
some_string 17 17 PartialPrivilege
some_string 17 18 FullPrivilege
some_integer 1 21 OutOfScope
some_integer 21 22 FullPrivilege
some_integer 22 22 PartialPrivilege
some_integer 22 23 FullPrivilege
<svg width="1030" height="590px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>ownership_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="650" y="90" data-hash="1"><title>s, immutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="820" y="90" data-hash="6"><title>some_string, immutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="930" y="90" data-hash="7"><title>some_integer, immutable</title>some_integer</text>
        <text style="text-anchor:middle" class="code" x="720" y="90" data-hash="4"><title>x, immutable</title>x</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="650" x2="650" y1="105" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="650" x2="650" y1="110" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="720" x2="720" y1="205" y2="245"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="720" x2="720" y1="210" y2="240"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="720" x2="720" y1="245" y2="325"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="720" x2="720" y1="250" y2="320"><title>has read only privilege to the real data</title></line>
        <line data-hash="6" class="solid" x1="820" x2="820" y1="385" y2="405"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="390" y2="400"><title>has read only privilege to the real data</title></line>
        <line data-hash="6" class="solid" x1="820" x2="820" y1="405" y2="405"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="410" y2="400"><title>has read only privilege to the real data</title></line>
        <line data-hash="6" class="solid" x1="820" x2="820" y1="405" y2="425"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="410" y2="420"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="930" x2="930" y1="485" y2="505"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="930" x2="930" y1="490" y2="500"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="930" x2="930" y1="505" y2="505"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="930" x2="930" y1="510" y2="500"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="930" x2="930" y1="505" y2="525"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="930" x2="930" y1="510" y2="520"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="650" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="650" y="145"><title>Moving resource to takes_ownership()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="650" y="325"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="720" y="205"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="720" y="245"><title>Copying resource to makes_copy()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="720" y="325"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="820" y="385"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="820" y="405"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="820" y="405"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="820" y="425"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="930" y="485"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="930" y="505"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="930" y="505"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="930" y="525"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="676" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="673,105 663,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <text x="615" y="150" font-size = "20" font-style="italic" class="heavy" ><title>takes_ownership()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="645,145 635,145 " marker-end="url(#arrowHead)"><title>Move from s to the parameter of takes_ownership()</title></polyline>
        <text x="685" y="250" font-size = "20" font-style="italic" class="heavy" ><title>makes_copy()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="715,245 705,245 " marker-end="url(#arrowHead)"><title>Duplicate from x to the parameter of makes_copy()</title></polyline>
        <use xlink:href="#functionDot" data-hash="6" x="820" y="405"><title>println!() reads from some_string</title></use>
        <use xlink:href="#functionDot" data-hash="7" x="930" y="505"><title>println!() reads from some_integer</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="580" x2="580" y1="70" y2="540"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = <tspan data-hash="2">String::from</tspan>("hello");  // s comes into scope </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="3">takes_ownership</tspan>(<tspan data-hash="1">s</tspan>);             // s's value moves into the function... </text>
        <text class="code" x="20" y="170">                                     // ... and so is no longer valid here </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="4">x</tspan> = 5;                      // x comes into scope </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250">     <tspan data-hash="5">makes_copy</tspan>(<tspan data-hash="4">x</tspan>);                  // x would move into the function, </text>
        <text class="code" x="20" y="270">                                     // but i32 is Copy, so it’s okay to still </text>
        <text class="code" x="20" y="290">                                     // use x afterward </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> } // Here, x goes out of scope, then s. But because s's value was moved, nothing </text>
        <text class="code" x="20" y="350">   // special happens. </text>
        <text class="code" x="20" y="370">  </text>
        <text class="code" x="20" y="390"> fn <tspan data-hash="3">takes_ownership</tspan>(<tspan data-hash="6">some_string</tspan>: String) { // some_string comes into scope </text>
        <text class="code" x="20" y="410">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="6">some_string</tspan>); </text>
        <text class="code" x="20" y="430"> } // Here, some_string goes out of scope and `drop` is called. The backing </text>
        <text class="code" x="20" y="450">   // memory is freed. </text>
        <text class="code" x="20" y="470">  </text>
        <text class="code" x="20" y="490"> fn <tspan data-hash="5">makes_copy</tspan>(<tspan data-hash="7">some_integer</tspan>: i32) { // some_integer comes into scope </text>
        <text class="code" x="20" y="510">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="7">some_integer</tspan>); </text>
        <text class="code" x="20" y="530"> } // Here, some_integer goes out of scope. Nothing special happens. </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_11_ownership_function/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_11.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.23s
     Running `target/debug/examples/return_values`
s1 1 2 OutOfScope
s1 2 10 FullPrivilege
some_string 1 17 OutOfScope
some_string 17 19 FullPrivilege
some_string 19 22 ResourceMoved
s2 1 5 OutOfScope
s2 5 7 FullPrivilege
s2 7 10 ResourceMoved
s3 1 7 OutOfScope
s3 7 10 FullPrivilege
a_string 1 25 OutOfScope
a_string 25 28 FullPrivilege
a_string 28 29 ResourceMoved
<svg width="1046" height="710px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>return_values</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="806" y="90" data-hash="4"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="946" y="90" data-hash="7"><title>a_string, immutable</title>a_string</text>
        <text style="text-anchor:middle" class="code" x="736" y="90" data-hash="3"><title>some_string, immutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="876" y="90" data-hash="5"><title>s3, immutable</title>s3</text>
        <text style="text-anchor:middle" class="code" x="636" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="636" x2="636" y1="105" y2="265"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="636" x2="636" y1="110" y2="260"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="736" x2="736" y1="405" y2="445"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="736" x2="736" y1="410" y2="440"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="806" x2="806" y1="165" y2="205"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="806" x2="806" y1="170" y2="200"><title>has read only privilege to the real data</title></line>
        <line data-hash="5" class="solid" x1="876" x2="876" y1="205" y2="265"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="876" x2="876" y1="210" y2="260"><title>has read only privilege to the real data</title></line>
        <line data-hash="7" class="solid" x1="946" x2="946" y1="565" y2="625"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="946" x2="946" y1="570" y2="620"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="636" y="105"><title>Acquiring resource from gives_ownership()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="636" y="265"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="736" y="405"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="736" y="445"><title>Moving resource</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="736" y="505"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="806" y="165"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="806" y="205"><title>Moving resource to takes_and_gives_back()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="806" y="265"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="876" y="205"><title>Acquiring resource from takes_and_gives_back()</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="876" y="265"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="946" y="565"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="946" y="625"><title>Moving resource</title></use>
        <use xlink:href="#eventDot" data-hash="7" x="946" y="645"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="662" y="110" font-size = "20" font-style="italic" class="heavy" ><title>gives_ownership()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="659,105 649,105 " marker-end="url(#arrowHead)"><title>Move from the return value of gives_ownership() to s1</title></polyline>
        <text x="771" y="210" font-size = "20" font-style="italic" class="heavy" ><title>takes_and_gives_back()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="801,205 791,205 " marker-end="url(#arrowHead)"><title>Move from s2 to the parameter of takes_and_gives_back()</title></polyline>
        <text x="902" y="210" font-size = "20" font-style="italic" class="heavy" ><title>takes_and_gives_back()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="899,205 889,205 " marker-end="url(#arrowHead)"><title>Move from the return value of takes_and_gives_back() to s3</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="566" x2="566" y1="70" y2="660"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="2">gives_ownership</tspan>();         // gives_ownership moves its return </text>
        <text class="code" x="20" y="130">                                         // value into s1 </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="4">s2</tspan> = String::from("hello");     // s2 comes into scope </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="5">s3</tspan> = <tspan data-hash="6">takes_and_gives_back</tspan>(<tspan data-hash="4">s2</tspan>);  // s2 is moved into </text>
        <text class="code" x="20" y="230">                                         // takes_and_gives_back, which also </text>
        <text class="code" x="20" y="250">                                         // moves its return value into s3 </text>
        <text class="code" x="20" y="270"> } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was </text>
        <text class="code" x="20" y="290">   // moved, so nothing happens. s1 goes out of scope and is dropped. </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> fn <tspan data-hash="2">gives_ownership</tspan>() -> String {             // gives_ownership will move its </text>
        <text class="code" x="20" y="350">                                              // return value into the function </text>
        <text class="code" x="20" y="370">                                              // that calls it </text>
        <text class="code" x="20" y="390">  </text>
        <text class="code" x="20" y="410">     let <tspan data-hash="3">some_string</tspan> = String::from("hello"); // some_string comes into scope </text>
        <text class="code" x="20" y="430">  </text>
        <text class="code" x="20" y="450">     <tspan data-hash="3">some_string</tspan>                             // some_string is returned and </text>
        <text class="code" x="20" y="470">                                              // moves out to the calling </text>
        <text class="code" x="20" y="490">                                              // function </text>
        <text class="code" x="20" y="510"> } </text>
        <text class="code" x="20" y="530">  </text>
        <text class="code" x="20" y="550"> // takes_and_gives_back will take a String and return one </text>
        <text class="code" x="20" y="570"> fn <tspan data-hash="6">takes_and_gives_back</tspan>(<tspan data-hash="7">a_string</tspan>: String) -> String { // a_string comes into </text>
        <text class="code" x="20" y="590">                                                       // scope </text>
        <text class="code" x="20" y="610">  </text>
        <text class="code" x="20" y="630">     <tspan data-hash="7">a_string</tspan>  // a_string is returned and moves out to the calling function </text>
        <text class="code" x="20" y="650"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_12_return_values/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_12.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

warning: unused variable: `println_func`
  --> examples/book_04_01_13_return_tuple/main.rs:55:9
   |
55 |     let println_func = ResourceOwner::Function(Function {
   |         ^^^^^^^^^^^^ help: consider prefixing with an underscore: `_println_func`
   |
   = note: `#[warn(unused_variables)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.20s
     Running `target/debug/examples/return_tuple`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
s1 4 7 FullPrivilege
len 1 4 OutOfScope
len 4 6 FullPrivilege
len 6 6 PartialPrivilege
len 6 7 FullPrivilege
s 1 9 OutOfScope
s 9 10 FullPrivilege
s 10 10 PartialPrivilege
s 10 12 FullPrivilege
s2 1 4 OutOfScope
s2 4 6 FullPrivilege
s2 6 6 PartialPrivilege
length 1 10 OutOfScope
length 10 12 FullPrivilege
<svg width="925" height="390px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>return_tuple</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="545" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="615" y="90" data-hash="2"><title>len, immutable</title>len</text>
        <text style="text-anchor:middle" class="code" x="825" y="90" data-hash="8"><title>length, immutable</title>length</text>
        <text style="text-anchor:middle" class="code" x="755" y="90" data-hash="6"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="685" y="90" data-hash="4"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="545" x2="545" y1="105" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="545" x2="545" y1="110" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="545" x2="545" y1="145" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="545" x2="545" y1="150" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="545" x2="545" y1="145" y2="205"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="545" x2="545" y1="150" y2="200"><title>has read only privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="615" x2="615" y1="145" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="615" x2="615" y1="150" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="615" x2="615" y1="185" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="615" x2="615" y1="190" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="615" x2="615" y1="185" y2="205"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="615" x2="615" y1="190" y2="200"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="685" x2="685" y1="245" y2="265"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="685" x2="685" y1="250" y2="260"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="685" x2="685" y1="265" y2="265"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="685" x2="685" y1="270" y2="260"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="685" x2="685" y1="265" y2="305"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="685" x2="685" y1="270" y2="300"><title>has read only privilege to the real data</title></line>
        <line data-hash="6" class="solid" x1="755" x2="755" y1="145" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="755" x2="755" y1="150" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="6" class="solid" x1="755" x2="755" y1="185" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="755" x2="755" y1="190" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="8" class="solid" x1="825" x2="825" y1="265" y2="305"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="825" x2="825" y1="270" y2="300"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="545" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="545" y="145"><title>Partially lends resource to calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="545" y="145"><title>Partially reacquires resource from calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="545" y="205"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="615" y="145"><title>Acquiring resource from calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="615" y="185"><title>Partially lends resource to len()</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="615" y="185"><title>Partially reacquires resource from len()</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="615" y="205"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="685" y="245"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="685" y="265"><title>Partially lends resource to len()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="685" y="265"><title>Partially reacquires resource from len()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="685" y="305"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="755" y="145"><title>Acquiring resource from calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="755" y="185"><title>Partially lends resource to len()</title></use>
        <use xlink:href="#eventDot" data-hash="6" x="755" y="185"><title>Partially reacquires resource from len()</title></use>
        <use xlink:href="#eventDot" data-hash="8" x="825" y="265"><title>Acquiring resource from len()</title></use>
        <use xlink:href="#eventDot" data-hash="8" x="825" y="305"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="571" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="568,105 558,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s1</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="545" y="145"><title>calculate_length() reads from s1</title></use>
        <text x="781" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="778,145 768,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to s2</title></polyline>
        <text x="641" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="638,145 628,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to len</title></polyline>
        <use xlink:href="#functionDot" data-hash="6" x="755" y="185"><title>len() reads from s2</title></use>
        <use xlink:href="#functionDot" data-hash="2" x="615" y="185"><title>len() reads from len</title></use>
        <use xlink:href="#functionDot" data-hash="4" x="685" y="265"><title>len() reads from s</title></use>
        <text x="851" y="270" font-size = "20" font-style="italic" class="heavy" ><title>len()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="848,265 838,265 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of len() to length</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="475" x2="475" y1="70" y2="340"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="5">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let (<tspan data-hash="6">s2</tspan>, <tspan data-hash="2">len</tspan>) = <tspan data-hash="3">calculate_length</tspan>(<tspan data-hash="1">&amp;s1</tspan>); </text>
        <text class="code" x="20" y="170">      </text>
        <text class="code" x="20" y="190">     <tspan data-hash="9">println!</tspan>("The length of '{}' is {}.", <tspan data-hash="6">s2</tspan>, <tspan data-hash="2">len</tspan>); </text>
        <text class="code" x="20" y="210"> } </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> fn <tspan data-hash="3">calculate_length</tspan>(<tspan data-hash="4">s</tspan>: String) -> (String, usize) { </text>
        <text class="code" x="20" y="270">     let <tspan data-hash="8">length</tspan> = <tspan data-hash="4">s</tspan>.<tspan data-hash="7">len</tspan>(); // len() returns the length of a String </text>
        <text class="code" x="20" y="290">  </text>
        <text class="code" x="20" y="310">     (<tspan data-hash="4">s</tspan>, <tspan data-hash="8">length</tspan>) </text>
        <text class="code" x="20" y="330"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_01_13_return_tuple/rendering.svg
successfully wrote to rustBook/src/img/vis_04_01_13.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/examples/pass_reference`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
s1 4 7 FullPrivilege
len 1 4 OutOfScope
len 4 7 FullPrivilege
s 1 9 OutOfScope
s 9 10 FullPrivilege
s 10 10 PartialPrivilege
s 10 11 FullPrivilege
<svg width="750" height="350px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>pass_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="447" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="517" y="90" data-hash="2"><title>len, immutable</title>len</text>
        <text style="text-anchor:middle" class="code" x="587" y="90" data-hash="4"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="447" x2="447" y1="105" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="447" x2="447" y1="110" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="447" x2="447" y1="145" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="447" x2="447" y1="150" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="447" x2="447" y1="145" y2="205"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="447" x2="447" y1="150" y2="200"><title>has read only privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="517" x2="517" y1="145" y2="205"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="517" x2="517" y1="150" y2="200"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="587" x2="587" y1="245" y2="265"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="587" x2="587" y1="250" y2="260"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="587" x2="587" y1="265" y2="265"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="587" x2="587" y1="270" y2="260"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="587" x2="587" y1="265" y2="285"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="587" x2="587" y1="270" y2="280"><title>has read only privilege to the reference itself</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="447" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="447" y="145"><title>Partially lends resource to calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="447" y="145"><title>Partially reacquires resource from calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="447" y="205"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="517" y="145"><title>Acquiring resource from calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="517" y="205"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="587" y="245"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="587" y="265"><title>Partially lends resource to len()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="587" y="265"><title>Partially reacquires resource from len()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="587" y="285"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="473" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="470,105 460,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s1</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="447" y="145"><title>calculate_length() reads from s1</title></use>
        <text x="543" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="540,145 530,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to len</title></polyline>
        <use xlink:href="#functionDot" data-hash="4" x="587" y="265"><title>len() reads from s</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="377" x2="377" y1="70" y2="300"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="5">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let <tspan data-hash="2">len</tspan> = <tspan data-hash="3">calculate_length</tspan>(<tspan data-hash="1">&amp;s1</tspan>); </text>
        <text class="code" x="20" y="170">  </text>
        <text class="code" x="20" y="190">     println!("The length of '{}' is {}.", <tspan data-hash="1">s1</tspan>, <tspan data-hash="2">len</tspan>); </text>
        <text class="code" x="20" y="210"> } </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> fn <tspan data-hash="3">calculate_length</tspan>(<tspan data-hash="4">s</tspan>: &amp;String) -> usize { </text>
        <text class="code" x="20" y="270">     <tspan data-hash="4">s</tspan>.len() </text>
        <text class="code" x="20" y="290"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_01_pass_reference/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_01.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

warning: unused variable: `s`
  --> examples/book_04_02_02_acquire_from_function/main.rs:21:9
   |
21 |     let s = Some(ResourceOwner::Variable(Variable {
   |         ^ help: consider prefixing with an underscore: `_s`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `len_func`
  --> examples/book_04_02_02_acquire_from_function/main.rs:37:9
   |
37 |     let len_func = Some(ResourceOwner::Function(Function {
   |         ^^^^^^^^ help: consider prefixing with an underscore: `_len_func`

    Finished dev [unoptimized + debuginfo] target(s) in 0.19s
     Running `target/debug/examples/acquire_from_function`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
len 1 4 OutOfScope
<svg width="750" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>acquire_from_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="314" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="384" y="90" data-hash="2"><title>len, immutable</title>len</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="314" x2="314" y1="105" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="314" x2="314" y1="110" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="314" x2="314" y1="145" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="314" x2="314" y1="150" y2="140"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="314" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="314" y="145"><title>Partially lends resource to calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="314" y="145"><title>Partially reacquires resource from calculate_length()</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="384" y="145"><title>Acquiring resource from calculate_length()</title></use>
    </g>

    <g id="arrows">
        <text x="340" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="337,105 327,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s1</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="314" y="145"><title>calculate_length() reads from s1</title></use>
        <text x="410" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="407,145 397,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to len</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="244" x2="244" y1="70" y2="160"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150"> let <tspan data-hash="1">len</tspan> = calculate_length(&amp;<tspan data-hash="1">s1</tspan>); </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_02_acquire_from_function/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_02.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.19s
     Running `target/debug/examples/safely_out_of_scope`
s 1 2 OutOfScope
s 2 3 FullPrivilege
s 3 3 PartialPrivilege
s 3 4 FullPrivilege
<svg width="750" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>safely_out_of_scope</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="636" y="90" data-hash="4"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="4" class="solid" x1="636" x2="636" y1="105" y2="125"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="636" x2="636" y1="110" y2="120"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="636" x2="636" y1="125" y2="125"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="636" x2="636" y1="130" y2="120"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="636" x2="636" y1="125" y2="145"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="636" x2="636" y1="130" y2="140"><title>has read only privilege to the reference itself</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="4" x="636" y="105"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="636" y="125"><title>Partially lends resource to len()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="636" y="125"><title>Partially reacquires resource from len()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="636" y="145"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <use xlink:href="#functionDot" data-hash="4" x="636" y="125"><title>len() reads from s</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="566" x2="566" y1="70" y2="180"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> fn <tspan data-hash="3">calculate_length</tspan>(<tspan data-hash="4">s</tspan>: &amp;String) -> usize { </text>
        <text class="code" x="20" y="130">     <tspan data-hash="4">s</tspan>.len() </text>
        <text class="code" x="20" y="150"> } // Here, s goes out of scope. But because it does not have ownership of what </text>
        <text class="code" x="20" y="170">   // it refers to, nothing happens. </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_03_safely_out_of_scope/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_03.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/examples/mut_ref`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 4 PartialPrivilege
s 4 5 FullPrivilege
some_string 1 7 OutOfScope
some_string 7 8 FullPrivilege
some_string 8 8 PartialPrivilege
some_string 8 9 FullPrivilege
<svg width="750" height="310px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>mut_ref</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="456" y="90" data-hash="4"><title>some_string, mutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="356" y="90" data-hash="1"><title>s, mutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="356" x2="356" y1="105" y2="145"><title>has read and write privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="356" x2="356" y1="145" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="356" x2="356" y1="150" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="356" x2="356" y1="145" y2="165"><title>has read and write privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="456" x2="456" y1="205" y2="225"><title>has read and write privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="456" x2="456" y1="225" y2="225"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="456" x2="456" y1="230" y2="220"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="456" x2="456" y1="225" y2="245"><title>has read and write privilege to the reference itself</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="356" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="356" y="145"><title>Partially lends resource to change()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="356" y="145"><title>Partially reacquires resource from change()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="356" y="165"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="456" y="205"><title>Acquiring resource</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="456" y="225"><title>Partially lends resource to push_str()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="456" y="225"><title>Partially reacquires resource from push_str()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="456" y="245"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="382" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="379,105 369,105 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of String::from() to s</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="356" y="145"><title>change() reads from s</title></use>
        <use xlink:href="#functionDot" data-hash="4" x="456" y="225"><title>push_str() reads from some_string</title></use>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="286" x2="286" y1="70" y2="260"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="1">s</tspan> = <tspan data-hash="2">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="3">change</tspan>(&amp;mut <tspan data-hash="1">s</tspan>); </text>
        <text class="code" x="20" y="170"> } </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210"> fn change(<tspan data-hash="4">some_string</tspan>: &amp;mut String) { </text>
        <text class="code" x="20" y="230">     <tspan data-hash="4">some_string</tspan>.<tspan data-hash="5">push_str</tspan>(", world"); </text>
        <text class="code" x="20" y="250"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_05_mut_ref/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_05.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/examples/scope_reference`
s 1 2 OutOfScope
s 2 5 FullPrivilege
s 5 6 RevokedPrivilege
s 6 9 FullPrivilege
r1 1 5 OutOfScope
r1 5 6 FullPrivilege
r1 6 6 RevokedPrivilege
r2 1 9 OutOfScope
<svg width="890" height="310px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="720" y="90" data-hash="2"><title>r1, immutable</title>r1</text>
        <text style="text-anchor:middle" class="code" x="790" y="90" data-hash="3"><title>r2, immutable</title>r2</text>
        <text style="text-anchor:middle" class="code" x="650" y="90" data-hash="1"><title>s, mutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="650" x2="650" y1="105" y2="165"><title>has read and write privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="650" x2="650" y1="185" y2="245"><title>has read and write privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="720" x2="720" y1="165" y2="185"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="720" x2="720" y1="170" y2="180"><title>has read only privilege to the reference itself</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="650" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="650" y="165"><title>Mutable lend to r1</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="650" y="185"><title>Fully reacquires resource from r1</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="650" y="245"><title>Mutable lend to r2</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="720" y="165"><title>Fully borrows resource from s</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="720" y="185"><title>Fully returns resource to s</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="720" y="185"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="790" y="245"><title>Fully borrows resource from s</title></use>
    </g>

    <g id="arrows">
        <text x="676" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="673,105 663,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="650,165 710,165 " marker-end="url(#arrowHead)"><title>Mutable borrow from s to r1</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="720,185 660,185 " marker-end="url(#arrowHead)"><title>Return mutably borrowed resource from r1 to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="650,245 780,245 " marker-end="url(#arrowHead)"><title>Mutable borrow from s to r2</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="580" x2="580" y1="70" y2="260"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let mut <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150"> { </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="2">r1</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210"> } // r1 goes out of scope here, so we can make a new reference with no problems. </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> let <tspan data-hash="3">r2</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_07_scope_reference/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_07.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/examples/shared_and_unique_borrow`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 5 PartialPrivilege
s 5 6 PartialPrivilege
s 6 6 PartialPrivilege
s 6 9 FullPrivilege
s 9 10 RevokedPrivilege
s 10 12 FullPrivilege
r1 1 4 OutOfScope
r1 4 6 PartialPrivilege
r1 6 6 PartialPrivilege
r1 6 6 PartialPrivilege
r1 6 12 OutOfScope
r2 1 5 OutOfScope
r2 5 6 PartialPrivilege
r2 6 6 PartialPrivilege
r2 6 6 PartialPrivilege
r2 6 12 OutOfScope
r3 1 9 OutOfScope
r3 9 10 FullPrivilege
r3 10 10 PartialPrivilege
r3 10 10 FullPrivilege
r3 10 12 RevokedPrivilege
<svg width="764" height="370px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>shared_and_unique_borrow</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="664" y="90" data-hash="4"><title>r3, immutable</title>r3</text>
        <text style="text-anchor:middle" class="code" x="454" y="90" data-hash="1"><title>s, mutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="594" y="90" data-hash="3"><title>r2, immutable</title>r2</text>
        <text style="text-anchor:middle" class="code" x="524" y="90" data-hash="2"><title>r1, immutable</title>r1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="454" x2="454" y1="105" y2="145"><title>has read and write privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="454" x2="454" y1="145" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="454" x2="454" y1="150" y2="160"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="454" x2="454" y1="165" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="454" x2="454" y1="170" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="454" x2="454" y1="185" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="454" x2="454" y1="190" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="454" x2="454" y1="185" y2="245"><title>has read and write privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="454" x2="454" y1="265" y2="305"><title>has read and write privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="524" x2="524" y1="145" y2="185"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="524" x2="524" y1="150" y2="180"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="2" class="solid" x1="524" x2="524" y1="185" y2="185"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="524" x2="524" y1="190" y2="180"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="2" class="solid" x1="524" x2="524" y1="185" y2="185"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="524" x2="524" y1="190" y2="180"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="3" class="solid" x1="594" x2="594" y1="165" y2="185"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="594" x2="594" y1="170" y2="180"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="3" class="solid" x1="594" x2="594" y1="185" y2="185"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="594" x2="594" y1="190" y2="180"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="3" class="solid" x1="594" x2="594" y1="185" y2="185"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="594" x2="594" y1="190" y2="180"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="664" x2="664" y1="245" y2="265"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="664" x2="664" y1="250" y2="260"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="664" x2="664" y1="265" y2="265"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="664" x2="664" y1="270" y2="260"><title>has read only privilege to the reference itself</title></line>
        <line data-hash="4" class="solid" x1="664" x2="664" y1="265" y2="265"><title>has read only privilege to the reference itself</title></line>
        <line class="colorless" stroke-width="8px" x1="664" x2="664" y1="270" y2="260"><title>has read only privilege to the reference itself</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="454" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="454" y="145"><title>Partially lends resource to r1</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="454" y="165"><title>Partially lends resource to r2</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="454" y="185"><title>Partially reacquires resource from r1</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="454" y="185"><title>Partially reacquires resource from r2</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="454" y="245"><title>Mutable lend to r3</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="454" y="265"><title>Fully reacquires resource from r3</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="454" y="305"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="524" y="145"><title>Partially borrows resource from s</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="524" y="185"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="524" y="185"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="524" y="185"><title>Partially returns resource to s</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="524" y="305"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="594" y="165"><title>Partially borrows resource from s</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="594" y="185"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="594" y="185"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="594" y="185"><title>Partially returns resource to s</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="594" y="305"><title>Goes out of scope</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="664" y="245"><title>Fully borrows resource from s</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="664" y="265"><title>Partially lends resource to println!()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="664" y="265"><title>Partially reacquires resource from println!()</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="664" y="265"><title>Fully returns resource to s</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="664" y="305"><title>Goes out of scope</title></use>
    </g>

    <g id="arrows">
        <text x="480" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="477,105 467,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="454,145 514,145 " marker-end="url(#arrowHead)"><title>Static borrow from s to r1</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="454,165 584,165 " marker-end="url(#arrowHead)"><title>Static borrow from s to r2</title></polyline>
        <use xlink:href="#functionDot" data-hash="2" x="524" y="185"><title>println!() reads from r1</title></use>
        <use xlink:href="#functionDot" data-hash="3" x="594" y="185"><title>println!() reads from r2</title></use>
        <polyline stroke-width="5" stroke="gray" points="524,185 464,185 " marker-end="url(#arrowHead)"><title>Return statically borrowed resource from r1 to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="594,185 464,185 " marker-end="url(#arrowHead)"><title>Return statically borrowed resource from r2 to s</title></polyline>
        <polyline stroke-width="5" stroke="gray" points="454,245 654,245 " marker-end="url(#arrowHead)"><title>Mutable borrow from s to r3</title></polyline>
        <use xlink:href="#functionDot" data-hash="4" x="664" y="265"><title>println!() reads from r3</title></use>
        <polyline stroke-width="5" stroke="gray" points="664,265 464,265 " marker-end="url(#arrowHead)"><title>Return mutably borrowed resource from r3 to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="384" x2="384" y1="70" y2="320"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main(){ </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let <tspan data-hash="2">r1</tspan> = <tspan data-hash="1">&amp;s</tspan>; // no problem </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="3">r2</tspan> = <tspan data-hash="1">&amp;s</tspan>; // no problem </text>
        <text class="code" x="20" y="190">     println!("{} and {}", <tspan data-hash="2">r1</tspan>, <tspan data-hash="3">r2</tspan>); </text>
        <text class="code" x="20" y="210">     // <tspan data-hash="2">r1</tspan> and <tspan data-hash="3">r2</tspan> are no longer used after this point </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250">     let <tspan data-hash="4">r3</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; // no problem </text>
        <text class="code" x="20" y="270">     println!("{}", <tspan data-hash="4">r3</tspan>); </text>
        <text class="code" x="20" y="290">  </text>
        <text class="code" x="20" y="310"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_09_shared_and_unique_borrow/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_09.svg
warning: unused import: `HashMap`
 --> src/data.rs:1:44
  |
1 |  use std::collections::{HashSet, BTreeMap, HashMap};
  |                                            ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:372:61
    |
372 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:399:96
    |
399 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:413:97
    |
413 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:434:93
    |
434 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:436:40
    |
436 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:461:18
    |
461 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:459:37
    |
459 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:219:4
    |
219 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant item is never used: `EVENT_DOT_STATIC_RETURN`
   --> src/hover_messages.rs:101:1
    |
101 | const EVENT_DOT_STATIC_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_RETURN`
   --> src/hover_messages.rs:108:1
    |
108 | const EVENT_DOT_MUT_RETURN: &'static str = "returns borrowed data to {1} ({0}'s lifetime ends here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_ACQUIRE`
   --> src/hover_messages.rs:119:1
    |
119 | const EVENT_DOT_ACQUIRE: &'static str = "obtains data from {1} ({0}'s lifetime begins from here)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_BORROW`
   --> src/hover_messages.rs:125:1
    |
125 | const EVENT_DOT_MUT_BORROW: &'static str = "mutably borrows data from {1} ({0} gains read and write access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_BORROW`
   --> src/hover_messages.rs:131:1
    |
131 | const EVENT_DOT_STATIC_BORROW: &'static str = "statically borrows data from {1} ({0} gains read only access to data)";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_STATIC_REACQUIRE`
   --> src/hover_messages.rs:138:1
    |
138 | const EVENT_DOT_STATIC_REACQUIRE: &'static str = "{1} no longer borrows from {0}";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant item is never used: `EVENT_DOT_MUT_REACQUIRE`
   --> src/hover_messages.rs:145:1
    |
145 | const EVENT_DOT_MUT_REACQUIRE: &'static str = "{0} no longer has any reference, so we may read and write the data";
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:401:62
    |
401 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/examples/no_dangle`
s 1 2 OutOfScope
s 2 5 FullPrivilege
<svg width="750" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>no_dangle</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="328" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="328" x2="328" y1="105" y2="165"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="328" x2="328" y1="110" y2="160"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="328" y="105"><title>Acquiring resource from String::from()</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="328" y="165"><title>Moving resource</title></use>
    </g>

    <g id="arrows">
        <text x="354" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="351,105 341,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="258" x2="258" y1="70" y2="180"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn no_dangle() -> String { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="1">s</tspan> </text>
        <text class="code" x="20" y="170"> } </text>
    </g>

   
</svg>
successfully wrote to examples/book_04_02_12_no_dangle/rendering.svg
successfully wrote to rustBook/src/img/vis_04_02_12.svg
