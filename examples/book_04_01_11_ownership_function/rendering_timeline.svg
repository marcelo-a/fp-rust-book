<svg width="450px" height="590px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>ownership_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}

[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text x="70" y="90" style="text-anchor:middle" data-hash="1" class="code tooltip-trigger" data-tooltip-text="s, immutable">s</text>
        <text x="140" y="90" style="text-anchor:middle" data-hash="2" class="code tooltip-trigger" data-tooltip-text="x, immutable">x</text>
        <text x="240" y="90" style="text-anchor:middle" data-hash="3" class="code tooltip-trigger" data-tooltip-text="some_string, immutable">some_string</text>
        <text x="350" y="90" style="text-anchor:middle" data-hash="4" class="code tooltip-trigger" data-tooltip-text="some_integer, immutable">some_integer</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="140" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="205" y2="245" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="210" y2="240" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="245" y2="325" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="250" y2="320" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="240" x2="240" y1="385" y2="405" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="240" x2="240" y1="390" y2="400" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="240" x2="240" y1="405" y2="405" data-tooltip-text="some values are statically referencing to some_string; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="240" x2="240" y1="410" y2="400" data-tooltip-text="some values are statically referencing to some_string; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="240" x2="240" y1="405" y2="425" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="240" x2="240" y1="410" y2="420" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="350" x2="350" y1="485" y2="505" data-tooltip-text="some_integer is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="350" x2="350" y1="490" y2="500" data-tooltip-text="some_integer is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="350" x2="350" y1="505" y2="505" data-tooltip-text="some values are statically referencing to some_integer; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="350" x2="350" y1="510" y2="500" data-tooltip-text="some values are statically referencing to some_integer; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="350" x2="350" y1="505" y2="525" data-tooltip-text="some_integer is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="350" x2="350" y1="510" y2="520" data-tooltip-text="some_integer is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="moves it's value to takes_ownership() (s lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="325" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="205" class="tooltip-trigger" data-tooltip-text="obtains data from another value (x's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="245" class="tooltip-trigger" data-tooltip-text="copies it's value to makes_copy() (x keeps ownership)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="325" class="tooltip-trigger" data-tooltip-text="x goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="385" class="tooltip-trigger" data-tooltip-text="obtains data from another value (some_string's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="405" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (some_string becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="405" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from some_string"/>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="425" class="tooltip-trigger" data-tooltip-text="some_string goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="4" x="350" y="485" class="tooltip-trigger" data-tooltip-text="obtains data from another value (some_integer's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="4" x="350" y="505" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (some_integer becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="4" x="350" y="505" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from some_integer"/>
        <use xlink:href="#eventDot" data-hash="4" x="350" y="525" class="tooltip-trigger" data-tooltip-text="some_integer goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size="20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>
        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
        <text x="35" y="150" fill="gray" font-size="20" font-style="italic" class="tooltip-trigger" data-tooltip-text="takes_ownership()">f</text>
        <polyline stroke-width="5" stroke="gray" points="65,145 55,145 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from s to the parameter of takes_ownership()"/>
        <text x="105" y="250" fill="gray" font-size="20" font-style="italic" class="tooltip-trigger" data-tooltip-text="makes_copy()">f</text>
        <polyline stroke-width="5" stroke="gray" points="135,245 125,245 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from x to the parameter of makes_copy()"/>
        <use xlink:href="#functionDot" data-hash="3" x="240" y="405" class="tooltip-trigger" data-tooltip-text="println!() reads from some_string"/>
        <use xlink:href="#functionDot" data-hash="4" x="350" y="505" class="tooltip-trigger" data-tooltip-text="println!() reads from some_integer"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="0" y="0" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="5" y="5" fill="white" font-size="12px" font-family="Arial, Helvetica, sans-serif" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}

			function showTooltip(evt) {
                <!-- track mouse movement -->
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 15) / CTM.d;
                tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");
                
                <!-- adjust box dimensions -->
                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 10);
				}
			}

			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>