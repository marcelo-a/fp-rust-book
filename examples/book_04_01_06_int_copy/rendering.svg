<svg width="750" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>int_copy</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="240" y="90" data-hash="3"><title>x, immutable</title>x</text>
        <text style="text-anchor:middle" class="code" x="310" y="90" data-hash="4"><title>y, immutable</title>y</text>
    </g>

    <g id="timelines">
        <line data-hash="3" class="solid" x1="240" x2="240" y1="105" y2="125"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="240" x2="240" y1="110" y2="120"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="240" x2="240" y1="125" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="240" x2="240" y1="130" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="310" x2="310" y1="125" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="310" x2="310" y1="130" y2="140"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="3" x="240" y="105"><title>copies it's value to another value (x keeps ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="125"><title>copies it's value to y (x keeps ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="145"><title>x goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="310" y="125"><title>copies it's value to x (y keeps ownership)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="310" y="145"><title>y goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <polyline stroke-width="5" stroke="gray" points="240,125 300,125 " marker-end="url(#arrowHead)"><title>Duplicate from x to y</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="170" x2="170" y1="70" y2="160"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="3">x</tspan> = 5; </text>
        <text class="code" x="20" y="130">     let <tspan data-hash="4">y</tspan> = x; </text>
        <text class="code" x="20" y="150"> } </text>
    </g>

   
</svg>