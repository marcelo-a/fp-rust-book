<svg width="1130" height="390px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>return_tuple</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    fill: var(--text-color);
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

/* text.functionIcon:hover {
    transform: scale(1.5);
}

text.functionIcon {
    transition: all 0.3s;
} */

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}
/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), </text>
        <text id="caption" x="30" y="50">states (vertical lines), and actions (arrows) for extra information.</text>
    </g>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="1030" y="90" data-hash="5"><title>length, immutable</title>length</text>
        <text style="text-anchor:middle" class="code" x="890" y="90" data-hash="3"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="960" y="90" data-hash="4"><title>s, immutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="820" y="90" data-hash="2"><title>len, immutable</title>len</text>
        <text style="text-anchor:middle" class="code" x="750" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid" x1="750" x2="750" y1="105" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="110" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="750" x2="750" y1="145" y2="145"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="150" y2="140"><title>has read only privilege to the real data</title></line>
        <line data-hash="1" class="solid" x1="750" x2="750" y1="145" y2="205"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="750" x2="750" y1="150" y2="200"><title>has read only privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="820" x2="820" y1="145" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="150" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="820" x2="820" y1="185" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="190" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="2" class="solid" x1="820" x2="820" y1="185" y2="205"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="820" x2="820" y1="190" y2="200"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="890" x2="890" y1="145" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="890" x2="890" y1="150" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="3" class="solid" x1="890" x2="890" y1="185" y2="185"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="890" x2="890" y1="190" y2="180"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="960" x2="960" y1="245" y2="265"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="960" x2="960" y1="250" y2="260"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="960" x2="960" y1="265" y2="265"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="960" x2="960" y1="270" y2="260"><title>has read only privilege to the real data</title></line>
        <line data-hash="4" class="solid" x1="960" x2="960" y1="265" y2="305"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="960" x2="960" y1="270" y2="300"><title>has read only privilege to the real data</title></line>
        <line data-hash="5" class="solid" x1="1030" x2="1030" y1="265" y2="305"><title>has read only privilege to the real data</title></line>
        <line class="colorless" stroke-width="8px" x1="1030" x2="1030" y1="270" y2="300"><title>has read only privilege to the real data</title></line>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="750" y="105"><title>obtains data from String::from() (s1's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="750" y="145"><title>statically lends its data to calculate_length() (s1 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="750" y="145"><title>calculate_length() no longer borrows from s1</title></use>
        <use xlink:href="#eventDot" data-hash="1" x="750" y="205"><title>s1 goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="820" y="145"><title>obtains data from calculate_length() (len's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="820" y="185"><title>statically lends its data to println!() (len becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="820" y="185"><title>println!() no longer borrows from len</title></use>
        <use xlink:href="#eventDot" data-hash="2" x="820" y="205"><title>len goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="890" y="145"><title>obtains data from calculate_length() (s2's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="890" y="185"><title>statically lends its data to println!() (s2 becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="3" x="890" y="185"><title>println!() no longer borrows from s2</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="960" y="245"><title>obtains data from another value (s's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="960" y="265"><title>statically lends its data to len() (s becomes read-only)</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="960" y="265"><title>len() no longer borrows from s</title></use>
        <use xlink:href="#eventDot" data-hash="4" x="960" y="305"><title>s goes out of scope. The data is dropped.</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="1030" y="265"><title>obtains data from len() (length's lifetime begins from here)</title></use>
        <use xlink:href="#eventDot" data-hash="5" x="1030" y="305"><title>length goes out of scope. The data is dropped.</title></use>
    </g>

    <g id="arrows">
        <text x="776" y="110" font-size = "20" font-style="italic" class="heavy" ><title>String::from()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="773,105 763,105 " marker-end="url(#arrowHead)"><title>Move from the return value of String::from() to s1</title></polyline>
        <use xlink:href="#functionDot" data-hash="1" x="750" y="145"><title>calculate_length() reads from s1</title></use>
        <text x="916" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="913,145 903,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to s2</title></polyline>
        <text x="846" y="150" font-size = "20" font-style="italic" class="heavy" ><title>calculate_length()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="843,145 833,145 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of calculate_length() to len</title></polyline>
        <use xlink:href="#functionDot" data-hash="3" x="890" y="185"><title>println!() reads from s2</title></use>
        <use xlink:href="#functionDot" data-hash="2" x="820" y="185"><title>println!() reads from len</title></use>
        <use xlink:href="#functionDot" data-hash="4" x="960" y="265"><title>len() reads from s</title></use>
        <text x="1056" y="270" font-size = "20" font-style="italic" class="heavy" ><title>len()</title>f</text>        <polyline stroke-width="5" stroke="gray" points="1053,265 1043,265 " marker-end="url(#arrowHead)"><title>Duplicate from the return value of len() to length</title></polyline>
    </g>

    <g id="dividers">
            <line stroke="gray" stroke-width="2" x1="680" x2="680" y1="70" y2="340"/>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="7">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let (<tspan data-hash="3">s2</tspan>, <tspan data-hash="2">len</tspan>) = <tspan data-hash="6">calculate_length</tspan>(<tspan data-hash="1">&amp;s1</tspan>);; </text>
        <text class="code" x="20" y="170">      </text>
        <text class="code" x="20" y="190">     <tspan data-hash="9">println!</tspan>("The length of '{}' is {}.", <tspan data-hash="3">s2</tspan>, <tspan data-hash="2">len</tspan>); </text>
        <text class="code" x="20" y="210"> } </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> fn <tspan data-hash="6">calculate_length</tspan>(<tspan data-hash="4">s</tspan>: String) -> (String, usize) { </text>
        <text class="code" x="20" y="270">     let <tspan data-hash="5">length</tspan> = <tspan data-hash="4">s</tspan>.<tspan data-hash="8">len</tspan>(); // len() returns the length of a String </text>
        <text class="code" x="20" y="290">  </text>
        <text class="code" x="20" y="310">     (<tspan data-hash="4">s</tspan>, <tspan data-hash="5">length</tspan>) </text>
        <text class="code" x="20" y="330"> } </text>
    </g>

   
</svg>