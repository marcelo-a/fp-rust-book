Running the following examples: 
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.22s
     Running `target/debug/examples/one_var`
s 1 2 OutOfScope
s 2 3 FullPrivilege
<svg width="450" height="190px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>one_var</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130"> } </text>
    </g>

   
</svg>
<svg width="200px" height="190px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>one_var</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="125" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="120" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_01_one_var/rendering_code.svg
successfully wrote to examples/book_04_01_01_one_var/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_01_code.svg
successfully wrote to rustBook/src/img/vis_04_01_01_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
warning: unused import: `Function`
 --> examples/book_04_01_02_scope/main.rs:1:76
  |
1 | use rrt_lib::data::{ExternalEvent, LifetimeTrait, ResourceOwner, Variable, Function, VisualizationData, Visualizable};
  |                                                                            ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 4.94s
     Running `target/debug/examples/scope`
s 1 3 OutOfScope
s 3 6 FullPrivilege
<svg width="576" height="270px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     {                      // s is not valid here, it’s not yet declared </text>
        <text class="code" x="20" y="130">         let <tspan data-hash="1">s</tspan> = "hello";   // s is valid from this point forward </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">         // do stuff with s </text>
        <text class="code" x="20" y="190">     }                      // this scope is now over, and s is no longer valid </text>
        <text class="code" x="20" y="210"> } </text>
    </g>

   
</svg>
<svg width="200px" height="270px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>scope</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="125" y2="185" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="130" y2="180" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="obtains data from another value (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_02_scope/rendering_code.svg
successfully wrote to examples/book_04_01_02_scope/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_02_code.svg
successfully wrote to rustBook/src/img/vis_04_01_02_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.48s
     Running `target/debug/examples/string_from`
s 1 2 OutOfScope
<svg width="450" height="170px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_from</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
    </g>

   
</svg>
<svg width="200px" height="170px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>string_from</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_03_string_from/rendering_code.svg
successfully wrote to examples/book_04_01_03_string_from/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_03_code.svg
successfully wrote to rustBook/src/img/vis_04_01_03_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.48s
     Running `target/debug/examples/reference`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 4 RevokedPrivilege
s 4 6 FullPrivilege
s 6 6 PartialPrivilege
s 6 7 FullPrivilege
<svg width="527" height="270px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="1">s</tspan> = String::from("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="1">s</tspan>.push_str(", world!"); // push_str() appends a literal to a String </text>
        <text class="code" x="20" y="170">  </text>
        <text class="code" x="20" y="190">     println!("{}", <tspan data-hash="1">s</tspan>); // This will print `hello, world!` </text>
        <text class="code" x="20" y="210"> } </text>
    </g>

   
</svg>
<svg width="200px" height="270px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, mutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="185" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="185" y2="185" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="190" y2="180" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="185" y2="205" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="mutably lends its data to push_str() (s becomes un-readable until the end of push_str()'s lifetime)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="push_str() is no longer a mutable referece of s, so we may read and write the data"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (s becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from s"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="205" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="push_str() reads from/writes to s"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="println!() reads from s"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_04_reference/rendering_code.svg
successfully wrote to examples/book_04_01_04_reference/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_04_code.svg
successfully wrote to rustBook/src/img/vis_04_01_04_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.70s
     Running `target/debug/examples/scope2`
s 1 3 OutOfScope
s 3 6 FullPrivilege
<svg width="569" height="290px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     { </text>
        <text class="code" x="20" y="130">         let <tspan data-hash="1">s</tspan> = String::from("hello"); // s is valid from this point forward </text>
        <text class="code" x="20" y="150">      </text>
        <text class="code" x="20" y="170">         // do stuff with s </text>
        <text class="code" x="20" y="190">     }                                  // this scope is now over, and s is no </text>
        <text class="code" x="20" y="210">                                        // longer valid </text>
        <text class="code" x="20" y="230"> } </text>
    </g>

   
</svg>
<svg width="200px" height="290px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>scope2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="125" y2="185" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="130" y2="180" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <text x="96" y="130" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,125 83,125 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_05_scope2/rendering_code.svg
successfully wrote to examples/book_04_01_05_scope2/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_05_code.svg
successfully wrote to rustBook/src/img/vis_04_01_05_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
warning: unused import: `Function`
 --> examples/book_04_01_06_int_copy/main.rs:1:76
  |
1 | use rrt_lib::data::{ExternalEvent, LifetimeTrait, ResourceOwner, Variable, Function, VisualizationData, Visualizable};
  |                                                                            ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 4.87s
     Running `target/debug/examples/int_copy`
x 1 2 OutOfScope
x 2 3 FullPrivilege
x 3 4 FullPrivilege
y 1 3 OutOfScope
y 3 4 FullPrivilege
<svg width="450" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>int_copy</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">x</tspan> = 5; </text>
        <text class="code" x="20" y="130">     let <tspan data-hash="2">y</tspan> = x; </text>
        <text class="code" x="20" y="150"> } </text>
    </g>

   
</svg>
<svg width="240px" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>int_copy</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>x, immutable</title>x</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>y, immutable</title>y</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="125" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="120" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="125" y2="145" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="130" y2="140" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="125" y2="145" data-tooltip-text="y is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="130" y2="140" data-tooltip-text="y is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from another value (x's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="copies it's value to y (x keeps ownership)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="x goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="125" class="tooltip-trigger" data-tooltip-text="obtains data from x (y's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="145" class="tooltip-trigger" data-tooltip-text="y goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <polyline stroke-width="5" stroke="gray" points="70,125 130,125 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from x to y"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_06_int_copy/rendering_code.svg
successfully wrote to examples/book_04_01_06_int_copy/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_06_code.svg
successfully wrote to rustBook/src/img/vis_04_01_06_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 3.89s
     Running `target/debug/examples/string_move`
s1 1 2 OutOfScope
s1 2 3 FullPrivilege
s2 1 3 OutOfScope
<svg width="450" height="190px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_move</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = <tspan data-hash="3">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130"> let <tspan data-hash="2">s2</tspan> = <tspan data-hash="1">s1</tspan>; </text>
    </g>

   
</svg>
<svg width="240px" height="190px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>string_move</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>s2, immutable</title>s2</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="125" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="120" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s1's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="moves it's value to s2 (s1 lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="125" class="tooltip-trigger" data-tooltip-text="obtains data from s1 (s2's lifetime begins from here)"/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from the return value of String::from() to s1"/>
        <polyline stroke-width="5" stroke="gray" points="70,125 130,125 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from s1 to s2"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_07_string_move/rendering_code.svg
successfully wrote to examples/book_04_01_07_string_move/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_07_code.svg
successfully wrote to rustBook/src/img/vis_04_01_07_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.36s
     Running `target/debug/examples/string_clone`
s1 1 2 OutOfScope
s1 2 3 FullPrivilege
s1 3 3 PartialPrivilege
s1 3 5 FullPrivilege
s1 5 5 PartialPrivilege
s2 1 3 OutOfScope
s2 3 5 FullPrivilege
s2 5 5 PartialPrivilege
<svg width="450" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>string_clone</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = <tspan data-hash="3">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130"> let <tspan data-hash="2">s2</tspan> = <tspan data-hash="1">s1</tspan>.<tspan data-hash="4">clone</tspan>(); </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170"> <tspan data-hash="5">println!</tspan>("s1 = {}, s2 = {}", <tspan data-hash="1">s1</tspan>, <tspan data-hash="2">s2</tspan>); </text>
    </g>

   
</svg>
<svg width="240px" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>string_clone</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>s2, immutable</title>s2</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="125" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="120" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="125" y2="125" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="130" y2="120" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="125" y2="165" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="130" y2="160" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="165" y2="165" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="170" y2="160" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="125" y2="165" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="130" y2="160" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="165" y2="165" data-tooltip-text="some values are statically referencing to s2; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="170" y2="160" data-tooltip-text="some values are statically referencing to s2; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s1's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="statically lends its data to clone() (s1 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="clone() no longer borrows from s1"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (s1 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from s1"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="125" class="tooltip-trigger" data-tooltip-text="obtains data from clone() (s2's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (s2 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from s2"/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from the return value of String::from() to s1"/>
        <text x="166" y="130" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="clone()">f</text>        <polyline stroke-width="5" stroke="gray" points="163,125 153,125 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of clone() to s2"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="clone() reads from s1"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="println!() reads from s1"/>
        <use xlink:href="#functionDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="println!() reads from s2"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_09_string_clone/rendering_code.svg
successfully wrote to examples/book_04_01_09_string_clone/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_09_code.svg
successfully wrote to rustBook/src/img/vis_04_01_09_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.33s
     Running `target/debug/examples/int_copy_2`
x 1 2 OutOfScope
x 2 3 FullPrivilege
x 3 5 FullPrivilege
x 5 5 PartialPrivilege
x 5 6 FullPrivilege
y 1 3 OutOfScope
y 3 5 FullPrivilege
y 5 5 PartialPrivilege
y 5 6 FullPrivilege
<svg width="450" height="250px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>int_copy_2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">x</tspan> = 5; </text>
        <text class="code" x="20" y="130">     let <tspan data-hash="2">y</tspan> = <tspan data-hash="1">x</tspan>; </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">     println!("x = {}, y = {}", <tspan data-hash="1">x</tspan>, <tspan data-hash="2">y</tspan>); </text>
        <text class="code" x="20" y="190"> } </text>
    </g>

   
</svg>
<svg width="240px" height="250px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>int_copy_2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>x, immutable</title>x</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>y, immutable</title>y</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="125" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="120" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="125" y2="165" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="130" y2="160" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="165" y2="165" data-tooltip-text="some values are statically referencing to x; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="170" y2="160" data-tooltip-text="some values are statically referencing to x; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="165" y2="185" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="170" y2="180" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="125" y2="165" data-tooltip-text="y is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="130" y2="160" data-tooltip-text="y is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="165" y2="165" data-tooltip-text="some values are statically referencing to y; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="170" y2="160" data-tooltip-text="some values are statically referencing to y; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="165" y2="185" data-tooltip-text="y is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="170" y2="180" data-tooltip-text="y is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from another value (x's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="copies it's value to y (x keeps ownership)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (x becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from x"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="x goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="125" class="tooltip-trigger" data-tooltip-text="obtains data from x (y's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (y becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from y"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="y goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <polyline stroke-width="5" stroke="gray" points="70,125 130,125 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from x to y"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="println!() reads from x"/>
        <use xlink:href="#functionDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="println!() reads from y"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_10_int_copy_2/rendering_code.svg
successfully wrote to examples/book_04_01_10_int_copy_2/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_10_code.svg
successfully wrote to rustBook/src/img/vis_04_01_10_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.87s
     Running `target/debug/examples/ownership_function`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 13 ResourceMoved
x 1 7 OutOfScope
x 7 9 FullPrivilege
x 9 13 FullPrivilege
some_string 1 16 OutOfScope
some_string 16 17 FullPrivilege
some_string 17 17 PartialPrivilege
some_string 17 18 FullPrivilege
some_integer 1 21 OutOfScope
some_integer 21 22 FullPrivilege
some_integer 22 22 PartialPrivilege
some_integer 22 23 FullPrivilege
<svg width="590" height="590px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>ownership_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = <tspan data-hash="5">String::from</tspan>("hello");  // s comes into scope </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="6">takes_ownership</tspan>(<tspan data-hash="1">s</tspan>);             // s's value moves into the function... </text>
        <text class="code" x="20" y="170">                                     // ... and so is no longer valid here </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="2">x</tspan> = 5;                      // x comes into scope </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250">     <tspan data-hash="7">makes_copy</tspan>(<tspan data-hash="2">x</tspan>);                  // x would move into the function, </text>
        <text class="code" x="20" y="270">                                     // but i32 is Copy, so it’s okay to still </text>
        <text class="code" x="20" y="290">                                     // use x afterward </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> } // Here, x goes out of scope, then s. But because s's value was moved, nothing </text>
        <text class="code" x="20" y="350">   // special happens. </text>
        <text class="code" x="20" y="370">  </text>
        <text class="code" x="20" y="390"> fn <tspan data-hash="6">takes_ownership</tspan>(<tspan data-hash="3">some_string</tspan>: String) { // some_string comes into scope </text>
        <text class="code" x="20" y="410">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="3">some_string</tspan>); </text>
        <text class="code" x="20" y="430"> } // Here, some_string goes out of scope and `drop` is called. The backing </text>
        <text class="code" x="20" y="450">   // memory is freed. </text>
        <text class="code" x="20" y="470">  </text>
        <text class="code" x="20" y="490"> fn <tspan data-hash="7">makes_copy</tspan>(<tspan data-hash="4">some_integer</tspan>: i32) { // some_integer comes into scope </text>
        <text class="code" x="20" y="510">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="4">some_integer</tspan>); </text>
        <text class="code" x="20" y="530"> } // Here, some_integer goes out of scope. Nothing special happens. </text>
    </g>

   
</svg>
<svg width="450px" height="590px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>ownership_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="350" y="90" data-hash="4"><title>some_integer, immutable</title>some_integer</text>
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, immutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>x, immutable</title>x</text>
        <text style="text-anchor:middle" class="code" x="240" y="90" data-hash="3"><title>some_string, immutable</title>some_string</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="140" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="205" y2="245" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="210" y2="240" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="245" y2="325" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="250" y2="320" data-tooltip-text="x is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="240" x2="240" y1="385" y2="405" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="240" x2="240" y1="390" y2="400" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="240" x2="240" y1="405" y2="405" data-tooltip-text="some values are statically referencing to some_string; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="240" x2="240" y1="410" y2="400" data-tooltip-text="some values are statically referencing to some_string; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="240" x2="240" y1="405" y2="425" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="240" x2="240" y1="410" y2="420" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="350" x2="350" y1="485" y2="505" data-tooltip-text="some_integer is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="350" x2="350" y1="490" y2="500" data-tooltip-text="some_integer is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="350" x2="350" y1="505" y2="505" data-tooltip-text="some values are statically referencing to some_integer; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="350" x2="350" y1="510" y2="500" data-tooltip-text="some values are statically referencing to some_integer; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="350" x2="350" y1="505" y2="525" data-tooltip-text="some_integer is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="350" x2="350" y1="510" y2="520" data-tooltip-text="some_integer is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="moves it's value to takes_ownership() (s lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="325" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="205" class="tooltip-trigger" data-tooltip-text="obtains data from another value (x's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="245" class="tooltip-trigger" data-tooltip-text="copies it's value to makes_copy() (x keeps ownership)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="325" class="tooltip-trigger" data-tooltip-text="x goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="385" class="tooltip-trigger" data-tooltip-text="obtains data from another value (some_string's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="405" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (some_string becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="405" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from some_string"/>
        <use xlink:href="#eventDot" data-hash="3" x="240" y="425" class="tooltip-trigger" data-tooltip-text="some_string goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="4" x="350" y="485" class="tooltip-trigger" data-tooltip-text="obtains data from another value (some_integer's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="4" x="350" y="505" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (some_integer becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="4" x="350" y="505" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from some_integer"/>
        <use xlink:href="#eventDot" data-hash="4" x="350" y="525" class="tooltip-trigger" data-tooltip-text="some_integer goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
        <text x="35" y="150" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="takes_ownership()">f</text>        <polyline stroke-width="5" stroke="gray" points="65,145 55,145 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from s to the parameter of takes_ownership()"/>
        <text x="105" y="250" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="makes_copy()">f</text>        <polyline stroke-width="5" stroke="gray" points="135,245 125,245 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from x to the parameter of makes_copy()"/>
        <use xlink:href="#functionDot" data-hash="3" x="240" y="405" class="tooltip-trigger" data-tooltip-text="println!() reads from some_string"/>
        <use xlink:href="#functionDot" data-hash="4" x="350" y="505" class="tooltip-trigger" data-tooltip-text="println!() reads from some_integer"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_11_ownership_function/rendering_code.svg
successfully wrote to examples/book_04_01_11_ownership_function/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_11_code.svg
successfully wrote to rustBook/src/img/vis_04_01_11_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.77s
     Running `target/debug/examples/return_values`
s1 1 2 OutOfScope
s1 2 10 FullPrivilege
s2 1 5 OutOfScope
s2 5 7 FullPrivilege
s2 7 10 ResourceMoved
s3 1 7 OutOfScope
s3 7 10 FullPrivilege
some_string 1 17 OutOfScope
some_string 17 19 FullPrivilege
some_string 19 22 ResourceMoved
a_string 1 25 OutOfScope
a_string 25 28 FullPrivilege
a_string 28 29 ResourceMoved
<svg width="576" height="710px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>return_values</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="6">gives_ownership</tspan>();         // gives_ownership moves its return </text>
        <text class="code" x="20" y="130">                                         // value into s1 </text>
        <text class="code" x="20" y="150">  </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="2">s2</tspan> = String::from("hello");     // s2 comes into scope </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="3">s3</tspan> = <tspan data-hash="7">takes_and_gives_back</tspan>(<tspan data-hash="2">s2</tspan>);  // s2 is moved into </text>
        <text class="code" x="20" y="230">                                         // takes_and_gives_back, which also </text>
        <text class="code" x="20" y="250">                                         // moves its return value into s3 </text>
        <text class="code" x="20" y="270"> } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was </text>
        <text class="code" x="20" y="290">   // moved, so nothing happens. s1 goes out of scope and is dropped. </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> fn <tspan data-hash="6">gives_ownership</tspan>() -> String {             // gives_ownership will move its </text>
        <text class="code" x="20" y="350">                                              // return value into the function </text>
        <text class="code" x="20" y="370">                                              // that calls it </text>
        <text class="code" x="20" y="390">  </text>
        <text class="code" x="20" y="410">     let <tspan data-hash="4">some_string</tspan> = String::from("hello"); // some_string comes into scope </text>
        <text class="code" x="20" y="430">  </text>
        <text class="code" x="20" y="450">     <tspan data-hash="4">some_string</tspan>                             // some_string is returned and </text>
        <text class="code" x="20" y="470">                                              // moves out to the calling </text>
        <text class="code" x="20" y="490">                                              // function </text>
        <text class="code" x="20" y="510"> } </text>
        <text class="code" x="20" y="530">  </text>
        <text class="code" x="20" y="550"> // takes_and_gives_back will take a String and return one </text>
        <text class="code" x="20" y="570"> fn <tspan data-hash="7">takes_and_gives_back</tspan>(<tspan data-hash="5">a_string</tspan>: String) -> String { // a_string comes into </text>
        <text class="code" x="20" y="590">                                                       // scope </text>
        <text class="code" x="20" y="610">  </text>
        <text class="code" x="20" y="630">     <tspan data-hash="5">a_string</tspan>  // a_string is returned and moves out to the calling function </text>
        <text class="code" x="20" y="650"> } </text>
    </g>

   
</svg>
<svg width="480px" height="710px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>return_values</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="310" y="90" data-hash="4"><title>some_string, immutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="210" y="90" data-hash="3"><title>s3, immutable</title>s3</text>
        <text style="text-anchor:middle" class="code" x="380" y="90" data-hash="5"><title>a_string, immutable</title>a_string</text>
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="265" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="260" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="165" y2="205" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="170" y2="200" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="205" y2="265" data-tooltip-text="s3 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="210" y2="260" data-tooltip-text="s3 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="310" x2="310" y1="405" y2="445" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="310" x2="310" y1="410" y2="440" data-tooltip-text="some_string is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="5" class="solid tooltip-trigger" x1="380" x2="380" y1="565" y2="625" data-tooltip-text="a_string is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="380" x2="380" y1="570" y2="620" data-tooltip-text="a_string is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from gives_ownership() (s1's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="265" class="tooltip-trigger" data-tooltip-text="s1 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="obtains data from another value (s2's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="205" class="tooltip-trigger" data-tooltip-text="moves it's value to takes_and_gives_back() (s2 lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="265" class="tooltip-trigger" data-tooltip-text="s2 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="205" class="tooltip-trigger" data-tooltip-text="obtains data from takes_and_gives_back() (s3's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="265" class="tooltip-trigger" data-tooltip-text="s3 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="4" x="310" y="405" class="tooltip-trigger" data-tooltip-text="obtains data from another value (some_string's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="4" x="310" y="445" class="tooltip-trigger" data-tooltip-text="moves it's value to another value (some_string lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="4" x="310" y="505" class="tooltip-trigger" data-tooltip-text="some_string goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="5" x="380" y="565" class="tooltip-trigger" data-tooltip-text="obtains data from another value (a_string's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="5" x="380" y="625" class="tooltip-trigger" data-tooltip-text="moves it's value to another value (a_string lost ownership)"/>
        <use xlink:href="#eventDot" data-hash="5" x="380" y="645" class="tooltip-trigger" data-tooltip-text="a_string goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="gives_ownership()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of gives_ownership() to s1"/>
        <text x="105" y="210" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="takes_and_gives_back()">f</text>        <polyline stroke-width="5" stroke="gray" points="135,205 125,205 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from s2 to the parameter of takes_and_gives_back()"/>
        <text x="236" y="210" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="takes_and_gives_back()">f</text>        <polyline stroke-width="5" stroke="gray" points="233,205 223,205 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of takes_and_gives_back() to s3"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_12_return_values/rendering_code.svg
successfully wrote to examples/book_04_01_12_return_values/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_12_code.svg
successfully wrote to rustBook/src/img/vis_04_01_12_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.80s
     Running `target/debug/examples/return_tuple`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
s1 4 7 FullPrivilege
len 1 4 OutOfScope
len 4 6 FullPrivilege
len 6 6 PartialPrivilege
len 6 7 FullPrivilege
s2 1 4 OutOfScope
s2 4 6 FullPrivilege
s2 6 6 PartialPrivilege
s2 6 7 FullPrivilege
s 1 9 OutOfScope
s 9 10 FullPrivilege
s 10 10 PartialPrivilege
s 10 12 FullPrivilege
length 1 10 OutOfScope
length 10 12 FullPrivilege
<svg width="485" height="390px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>return_tuple</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="7">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let (<tspan data-hash="3">s2</tspan>, <tspan data-hash="2">len</tspan>) = <tspan data-hash="6">calculate_length</tspan>(<tspan data-hash="1">&amp;s1</tspan>); </text>
        <text class="code" x="20" y="170">      </text>
        <text class="code" x="20" y="190">     <tspan data-hash="9">println!</tspan>("The length of '{}' is {}.", <tspan data-hash="3">s2</tspan>, <tspan data-hash="2">len</tspan>); </text>
        <text class="code" x="20" y="210"> } </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> fn <tspan data-hash="6">calculate_length</tspan>(<tspan data-hash="4">s</tspan>: String) -> (String, usize) { </text>
        <text class="code" x="20" y="270">     let <tspan data-hash="5">length</tspan> = <tspan data-hash="4">s</tspan>.<tspan data-hash="8">len</tspan>(); // len() returns the length of a String </text>
        <text class="code" x="20" y="290">  </text>
        <text class="code" x="20" y="310">     (<tspan data-hash="4">s</tspan>, <tspan data-hash="5">length</tspan>) </text>
        <text class="code" x="20" y="330"> } </text>
    </g>

   
</svg>
<svg width="450px" height="390px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>return_tuple</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="350" y="90" data-hash="5"><title>length, immutable</title>length</text>
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="210" y="90" data-hash="3"><title>s2, immutable</title>s2</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>len, immutable</title>len</text>
        <text style="text-anchor:middle" class="code" x="280" y="90" data-hash="4"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="140" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="145" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="150" y2="140" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="205" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="150" y2="200" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="145" y2="185" data-tooltip-text="len is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="150" y2="180" data-tooltip-text="len is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="185" y2="185" data-tooltip-text="some values are statically referencing to len; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="190" y2="180" data-tooltip-text="some values are statically referencing to len; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="185" y2="205" data-tooltip-text="len is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="190" y2="200" data-tooltip-text="len is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="145" y2="185" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="150" y2="180" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="185" y2="185" data-tooltip-text="some values are statically referencing to s2; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="190" y2="180" data-tooltip-text="some values are statically referencing to s2; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="185" y2="205" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="190" y2="200" data-tooltip-text="s2 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="280" x2="280" y1="245" y2="265" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="280" x2="280" y1="250" y2="260" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="280" x2="280" y1="265" y2="265" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="280" x2="280" y1="270" y2="260" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="280" x2="280" y1="265" y2="305" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="280" x2="280" y1="270" y2="300" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="5" class="solid tooltip-trigger" x1="350" x2="350" y1="265" y2="305" data-tooltip-text="length is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="350" x2="350" y1="270" y2="300" data-tooltip-text="length is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s1's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="statically lends its data to calculate_length() (s1 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="calculate_length() no longer borrows from s1"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="205" class="tooltip-trigger" data-tooltip-text="s1 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="145" class="tooltip-trigger" data-tooltip-text="obtains data from calculate_length() (len's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (len becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from len"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="205" class="tooltip-trigger" data-tooltip-text="len goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="145" class="tooltip-trigger" data-tooltip-text="obtains data from calculate_length() (s2's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="185" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (s2 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="185" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from s2"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="205" class="tooltip-trigger" data-tooltip-text="s2 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="245" class="tooltip-trigger" data-tooltip-text="obtains data from another value (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="265" class="tooltip-trigger" data-tooltip-text="statically lends its data to len() (s becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="265" class="tooltip-trigger" data-tooltip-text="len() no longer borrows from s"/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="305" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="5" x="350" y="265" class="tooltip-trigger" data-tooltip-text="obtains data from len() (length's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="5" x="350" y="305" class="tooltip-trigger" data-tooltip-text="length goes out of scope. The data is dropped."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s1"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="calculate_length() reads from s1"/>
        <text x="236" y="150" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="calculate_length()">f</text>        <polyline stroke-width="5" stroke="gray" points="233,145 223,145 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from the return value of calculate_length() to s2"/>
        <text x="166" y="150" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="calculate_length()">f</text>        <polyline stroke-width="5" stroke="gray" points="163,145 153,145 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from the return value of calculate_length() to len"/>
        <use xlink:href="#functionDot" data-hash="3" x="210" y="185" class="tooltip-trigger" data-tooltip-text="println!() reads from s2"/>
        <use xlink:href="#functionDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="println!() reads from len"/>
        <use xlink:href="#functionDot" data-hash="4" x="280" y="265" class="tooltip-trigger" data-tooltip-text="len() reads from s"/>
        <text x="376" y="270" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="len()">f</text>        <polyline stroke-width="5" stroke="gray" points="373,265 363,265 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from the return value of len() to length"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_01_13_return_tuple/rendering_code.svg
successfully wrote to examples/book_04_01_13_return_tuple/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_01_13_code.svg
successfully wrote to rustBook/src/img/vis_04_01_13_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.67s
     Running `target/debug/examples/pass_reference`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
s1 4 7 FullPrivilege
len 1 4 OutOfScope
len 4 7 FullPrivilege
s 1 9 OutOfScope
s 9 10 FullPrivilege
s 10 10 PartialPrivilege
s 10 11 FullPrivilege
<svg width="450" height="350px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>pass_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s1</tspan> = <tspan data-hash="5">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let <tspan data-hash="2">len</tspan> = <tspan data-hash="4">calculate_length</tspan>(<tspan data-hash="1">&amp;s1</tspan>); </text>
        <text class="code" x="20" y="170">  </text>
        <text class="code" x="20" y="190">     println!("The length of '{}' is {}.", <tspan data-hash="1">s1</tspan>, <tspan data-hash="2">len</tspan>); </text>
        <text class="code" x="20" y="210"> } </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> fn <tspan data-hash="4">calculate_length</tspan>(<tspan data-hash="3">s</tspan>: &amp;String) -> usize { </text>
        <text class="code" x="20" y="270">     <tspan data-hash="3">s</tspan>.len() </text>
        <text class="code" x="20" y="290"> } </text>
    </g>

   
</svg>
<svg width="310px" height="350px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>pass_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>len, immutable</title>len</text>
        <text style="text-anchor:middle" class="code" x="210" y="90" data-hash="3"><title>s, immutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="140" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="145" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="150" y2="140" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="205" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="150" y2="200" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="145" y2="205" data-tooltip-text="len is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="150" y2="200" data-tooltip-text="len is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="245" y2="265" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="250" y2="260" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="265" y2="265" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="270" y2="260" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="265" y2="285" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="270" y2="280" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s1's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="statically lends its data to calculate_length() (s1 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="calculate_length() no longer borrows from s1"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="205" class="tooltip-trigger" data-tooltip-text="s1 goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="145" class="tooltip-trigger" data-tooltip-text="obtains data from calculate_length() (len's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="205" class="tooltip-trigger" data-tooltip-text="len goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="245" class="tooltip-trigger" data-tooltip-text="obtains data from another value (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="265" class="tooltip-trigger" data-tooltip-text="statically lends its data to len() (s becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="265" class="tooltip-trigger" data-tooltip-text="len() no longer borrows from s"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="285" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is not dropped because s is not the owner."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s1"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="calculate_length() reads from s1"/>
        <text x="166" y="150" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="calculate_length()">f</text>        <polyline stroke-width="5" stroke="gray" points="163,145 153,145 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from the return value of calculate_length() to len"/>
        <use xlink:href="#functionDot" data-hash="3" x="210" y="265" class="tooltip-trigger" data-tooltip-text="len() reads from s"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_02_01_pass_reference/rendering_code.svg
successfully wrote to examples/book_04_02_01_pass_reference/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_02_01_code.svg
successfully wrote to rustBook/src/img/vis_04_02_01_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.70s
     Running `target/debug/examples/acquire_from_function`
s1 1 2 OutOfScope
s1 2 4 FullPrivilege
s1 4 4 PartialPrivilege
len 1 4 OutOfScope
<svg width="450" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>acquire_from_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let <tspan data-hash="1">s1</tspan> = <tspan data-hash="4">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150"> let <tspan data-hash="2">len</tspan> = <tspan data-hash="3">calculate_length</tspan>(&amp;<tspan data-hash="1">s1</tspan>); </text>
    </g>

   
</svg>
<svg width="240px" height="210px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>acquire_from_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s1, immutable</title>s1</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>len, immutable</title>len</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="140" data-tooltip-text="s1 is the unique value that can access the data in memory; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="145" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="150" y2="140" data-tooltip-text="some values are statically referencing to s1; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s1's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="statically lends its data to calculate_length() (s1 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="calculate_length() no longer borrows from s1"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="145" class="tooltip-trigger" data-tooltip-text="obtains data from calculate_length() (len's lifetime begins from here)"/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s1"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="calculate_length() reads from s1"/>
        <text x="166" y="150" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="calculate_length()">f</text>        <polyline stroke-width="5" stroke="gray" points="163,145 153,145 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from the return value of calculate_length() to len"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_02_02_acquire_from_function/rendering_code.svg
successfully wrote to examples/book_04_02_02_acquire_from_function/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_02_02_code.svg
successfully wrote to rustBook/src/img/vis_04_02_02_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.51s
     Running `target/debug/examples/safely_out_of_scope`
s 1 2 OutOfScope
s 2 3 FullPrivilege
s 3 3 PartialPrivilege
s 3 4 FullPrivilege
<svg width="576" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>safely_out_of_scope</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> fn <tspan data-hash="3">calculate_length</tspan>(<tspan data-hash="1">s</tspan>: &amp;String) -> usize { </text>
        <text class="code" x="20" y="130">     <tspan data-hash="1">s</tspan>.<tspan data-hash="2">len</tspan>() </text>
        <text class="code" x="20" y="150"> } // Here, s goes out of scope. But because it does not have ownership of what </text>
        <text class="code" x="20" y="170">   // it refers to, nothing happens. </text>
    </g>

   
</svg>
<svg width="200px" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>safely_out_of_scope</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="125" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="120" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="125" y2="125" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="130" y2="120" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="125" y2="145" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="130" y2="140" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from another value (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="statically lends its data to len() (s becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="len() no longer borrows from s"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is not dropped because s is not the owner."/>
    </g>

    <g id="arrows">
        <use xlink:href="#functionDot" data-hash="1" x="70" y="125" class="tooltip-trigger" data-tooltip-text="len() reads from s"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_02_03_safely_out_of_scope/rendering_code.svg
successfully wrote to examples/book_04_02_03_safely_out_of_scope/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_02_03_code.svg
successfully wrote to rustBook/src/img/vis_04_02_03_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.41s
     Running `target/debug/examples/mut_ref`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 4 PartialPrivilege
s 4 5 FullPrivilege
some_string 1 7 OutOfScope
some_string 7 8 FullPrivilege
some_string 8 8 PartialPrivilege
some_string 8 9 FullPrivilege
<svg width="450" height="310px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>mut_ref</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="1">s</tspan> = <tspan data-hash="4">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="3">change</tspan>(&amp;mut <tspan data-hash="1">s</tspan>); </text>
        <text class="code" x="20" y="170"> } </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210"> fn change(<tspan data-hash="2">some_string</tspan>: &amp;mut String) { </text>
        <text class="code" x="20" y="230">     <tspan data-hash="2">some_string</tspan>.<tspan data-hash="5">push_str</tspan>(", world"); </text>
        <text class="code" x="20" y="250"> } </text>
    </g>

   
</svg>
<svg width="270px" height="310px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>mut_ref</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="170" y="90" data-hash="2"><title>some_string, mutable</title>some_string</text>
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, mutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="145" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="150" y2="140" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="165" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="170" x2="170" y1="205" y2="225" data-tooltip-text="some_string is the unique value that can access the data in memory; can read and write data; can point to another piece of data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="170" x2="170" y1="225" y2="225" data-tooltip-text="some values are statically referencing to some_string; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="170" x2="170" y1="230" y2="220" data-tooltip-text="some values are statically referencing to some_string; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="170" x2="170" y1="225" y2="245" data-tooltip-text="some_string is the unique value that can access the data in memory; can read and write data; can point to another piece of data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="statically lends its data to change() (s becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="change() no longer borrows from s"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="170" y="205" class="tooltip-trigger" data-tooltip-text="obtains data from another value (some_string's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="170" y="225" class="tooltip-trigger" data-tooltip-text="statically lends its data to push_str() (some_string becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="2" x="170" y="225" class="tooltip-trigger" data-tooltip-text="push_str() no longer borrows from some_string"/>
        <use xlink:href="#eventDot" data-hash="2" x="170" y="245" class="tooltip-trigger" data-tooltip-text="some_string goes out of scope. The data is not dropped because some_string is not the owner."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Duplicate from the return value of String::from() to s"/>
        <use xlink:href="#functionDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="change() reads from s"/>
        <use xlink:href="#functionDot" data-hash="2" x="170" y="225" class="tooltip-trigger" data-tooltip-text="push_str() reads from some_string"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_02_05_mut_ref/rendering_code.svg
successfully wrote to examples/book_04_02_05_mut_ref/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_02_05_code.svg
successfully wrote to rustBook/src/img/vis_04_02_05_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.56s
     Running `target/debug/examples/scope_reference`
s 1 2 OutOfScope
s 2 5 FullPrivilege
s 5 6 RevokedPrivilege
s 6 9 FullPrivilege
r1 1 5 OutOfScope
r1 5 6 FullPrivilege
r1 6 6 OutOfScope
r2 1 9 OutOfScope
<svg width="590" height="310px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>scope_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90">  </text>
        <text class="code" x="20" y="110"> let mut <tspan data-hash="1">s</tspan> = <tspan data-hash="4">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150"> { </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="2">r1</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210"> } // r1 goes out of scope here, so we can make a new reference with no problems. </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250"> let <tspan data-hash="3">r2</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; </text>
    </g>

   
</svg>
<svg width="310px" height="310px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>scope_reference</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>r1, immutable</title>r1</text>
        <text style="text-anchor:middle" class="code" x="210" y="90" data-hash="3"><title>r2, immutable</title>r2</text>
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, mutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="165" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="185" y2="245" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="165" y2="185" data-tooltip-text="r1 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="170" y2="180" data-tooltip-text="r1 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="mutably lends its data to r1 (s becomes un-readable until the end of r1's lifetime)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="r1 is no longer a mutable referece of s, so we may read and write the data"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="245" class="tooltip-trigger" data-tooltip-text="mutably lends its data to r2 (s becomes un-readable until the end of r2's lifetime)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="165" class="tooltip-trigger" data-tooltip-text="mutably borrows data from s (r1 gains read and write access to data)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="returns borrowed data to s (r1's lifetime ends here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="r1 goes out of scope. The data is not dropped because r1 is not the owner."/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="245" class="tooltip-trigger" data-tooltip-text="mutably borrows data from s (r2 gains read and write access to data)"/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
        <polyline stroke-width="5" stroke="gray" points="70,165 130,165 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Mutable borrow from s to r1"/>
        <polyline stroke-width="5" stroke="gray" points="140,185 80,185 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Return mutably borrowed resource from r1 to s"/>
        <polyline stroke-width="5" stroke="gray" points="70,245 200,245 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Mutable borrow from s to r2"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_02_07_scope_reference/rendering_code.svg
successfully wrote to examples/book_04_02_07_scope_reference/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_02_07_code.svg
successfully wrote to rustBook/src/img/vis_04_02_07_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.45s
     Running `target/debug/examples/shared_and_unique_borrow`
s 1 2 OutOfScope
s 2 4 FullPrivilege
s 4 5 PartialPrivilege
s 5 6 PartialPrivilege
s 6 6 PartialPrivilege
s 6 9 FullPrivilege
s 9 10 RevokedPrivilege
s 10 12 FullPrivilege
r1 1 4 OutOfScope
r1 4 6 PartialPrivilege
r1 6 6 PartialPrivilege
r1 6 6 PartialPrivilege
r1 6 12 OutOfScope
r2 1 5 OutOfScope
r2 5 6 PartialPrivilege
r2 6 6 PartialPrivilege
r2 6 6 PartialPrivilege
r2 6 12 OutOfScope
r3 1 9 OutOfScope
r3 9 10 FullPrivilege
r3 10 10 PartialPrivilege
r3 10 10 FullPrivilege
r3 10 12 OutOfScope
<svg width="450" height="370px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>shared_and_unique_borrow</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main(){ </text>
        <text class="code" x="20" y="110">     let mut <tspan data-hash="1">s</tspan> = <tspan data-hash="5">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     let <tspan data-hash="2">r1</tspan> = <tspan data-hash="1">&amp;s</tspan>; // no problem </text>
        <text class="code" x="20" y="170">     let <tspan data-hash="3">r2</tspan> = <tspan data-hash="1">&amp;s</tspan>; // no problem </text>
        <text class="code" x="20" y="190">     <tspan data-hash="6">println!</tspan>("{} and {}", <tspan data-hash="2">r1</tspan>, <tspan data-hash="3">r2</tspan>); </text>
        <text class="code" x="20" y="210">     // <tspan data-hash="2">r1</tspan> and <tspan data-hash="3">r2</tspan> are no longer used after this point </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250">     let <tspan data-hash="4">r3</tspan> = <tspan data-hash="1">&amp;mut s</tspan>; // no problem </text>
        <text class="code" x="20" y="270">     <tspan data-hash="6">println!</tspan>("{}", <tspan data-hash="4">r3</tspan>); </text>
        <text class="code" x="20" y="290">  </text>
        <text class="code" x="20" y="310"> } </text>
    </g>

   
</svg>
<svg width="380px" height="370px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>shared_and_unique_borrow</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, mutable</title>s</text>
        <text style="text-anchor:middle" class="code" x="280" y="90" data-hash="4"><title>r3, immutable</title>r3</text>
        <text style="text-anchor:middle" class="code" x="210" y="90" data-hash="3"><title>r2, immutable</title>r2</text>
        <text style="text-anchor:middle" class="code" x="140" y="90" data-hash="2"><title>r1, immutable</title>r1</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="145" y2="165" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="150" y2="160" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="165" y2="185" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="170" y2="180" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="185" y2="185" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="190" y2="180" data-tooltip-text="some values are statically referencing to s; can only read data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="185" y2="245" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="265" y2="305" data-tooltip-text="s is the unique value that can access the data in memory; can read and write data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="145" y2="185" data-tooltip-text="some values are statically referencing to r1; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="150" y2="180" data-tooltip-text="some values are statically referencing to r1; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="185" y2="185" data-tooltip-text="some values are statically referencing to r1; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="190" y2="180" data-tooltip-text="some values are statically referencing to r1; can only read data"/>
        <line data-hash="2" class="solid tooltip-trigger" x1="140" x2="140" y1="185" y2="185" data-tooltip-text="some values are statically referencing to r1; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="140" x2="140" y1="190" y2="180" data-tooltip-text="some values are statically referencing to r1; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="165" y2="185" data-tooltip-text="some values are statically referencing to r2; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="170" y2="180" data-tooltip-text="some values are statically referencing to r2; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="185" y2="185" data-tooltip-text="some values are statically referencing to r2; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="190" y2="180" data-tooltip-text="some values are statically referencing to r2; can only read data"/>
        <line data-hash="3" class="solid tooltip-trigger" x1="210" x2="210" y1="185" y2="185" data-tooltip-text="some values are statically referencing to r2; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="210" x2="210" y1="190" y2="180" data-tooltip-text="some values are statically referencing to r2; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="280" x2="280" y1="245" y2="265" data-tooltip-text="r3 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="280" x2="280" y1="250" y2="260" data-tooltip-text="r3 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="280" x2="280" y1="265" y2="265" data-tooltip-text="some values are statically referencing to r3; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="280" x2="280" y1="270" y2="260" data-tooltip-text="some values are statically referencing to r3; can only read data"/>
        <line data-hash="4" class="solid tooltip-trigger" x1="280" x2="280" y1="265" y2="265" data-tooltip-text="r3 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="280" x2="280" y1="270" y2="260" data-tooltip-text="r3 is the unique value that can access the data in memory; can read and write data; can not point to another piece of data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="statically lends its data to r1 (s becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="165" class="tooltip-trigger" data-tooltip-text="statically lends its data to r2 (s becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="r1 no longer borrows from s"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="185" class="tooltip-trigger" data-tooltip-text="r2 no longer borrows from s"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="245" class="tooltip-trigger" data-tooltip-text="mutably lends its data to r3 (s becomes un-readable until the end of r3's lifetime)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="265" class="tooltip-trigger" data-tooltip-text="r3 is no longer a mutable referece of s, so we may read and write the data"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="305" class="tooltip-trigger" data-tooltip-text="s goes out of scope. The data is dropped."/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="145" class="tooltip-trigger" data-tooltip-text="statically borrows data from s (r1 gains read only access to data)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (r1 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from r1"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="returns borrowed data to s (r1's lifetime ends here)"/>
        <use xlink:href="#eventDot" data-hash="2" x="140" y="305" class="tooltip-trigger" data-tooltip-text="r1 goes out of scope. The data is not dropped because r1 is not the owner."/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="165" class="tooltip-trigger" data-tooltip-text="statically borrows data from s (r2 gains read only access to data)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="185" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (r2 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="185" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from r2"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="185" class="tooltip-trigger" data-tooltip-text="returns borrowed data to s (r2's lifetime ends here)"/>
        <use xlink:href="#eventDot" data-hash="3" x="210" y="305" class="tooltip-trigger" data-tooltip-text="r2 goes out of scope. The data is not dropped because r2 is not the owner."/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="245" class="tooltip-trigger" data-tooltip-text="mutably borrows data from s (r3 gains read and write access to data)"/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="265" class="tooltip-trigger" data-tooltip-text="statically lends its data to println!() (r3 becomes read-only)"/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="265" class="tooltip-trigger" data-tooltip-text="println!() no longer borrows from r3"/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="265" class="tooltip-trigger" data-tooltip-text="returns borrowed data to s (r3's lifetime ends here)"/>
        <use xlink:href="#eventDot" data-hash="4" x="280" y="305" class="tooltip-trigger" data-tooltip-text="r3 goes out of scope. The data is not dropped because r3 is not the owner."/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
        <polyline stroke-width="5" stroke="gray" points="70,145 130,145 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Static borrow from s to r1"/>
        <polyline stroke-width="5" stroke="gray" points="70,165 200,165 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Static borrow from s to r2"/>
        <use xlink:href="#functionDot" data-hash="2" x="140" y="185" class="tooltip-trigger" data-tooltip-text="println!() reads from r1"/>
        <use xlink:href="#functionDot" data-hash="3" x="210" y="185" class="tooltip-trigger" data-tooltip-text="println!() reads from r2"/>
        <polyline stroke-width="5" stroke="gray" points="140,185 80,185 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Return statically borrowed resource from r1 to s"/>
        <polyline stroke-width="5" stroke="gray" points="210,185 80,185 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Return statically borrowed resource from r2 to s"/>
        <polyline stroke-width="5" stroke="gray" points="70,245 270,245 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Mutable borrow from s to r3"/>
        <use xlink:href="#functionDot" data-hash="4" x="280" y="265" class="tooltip-trigger" data-tooltip-text="println!() reads from r3"/>
        <polyline stroke-width="5" stroke="gray" points="280,265 80,265 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Return mutably borrowed resource from r3 to s"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_02_09_shared_and_unique_borrow/rendering_code.svg
successfully wrote to examples/book_04_02_09_shared_and_unique_borrow/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_02_09_code.svg
successfully wrote to rustBook/src/img/vis_04_02_09_timeline.svg
warning: unused imports: `Formatter`, `Result`
 --> src/hover_messages.rs:1:16
  |
1 | use std::fmt::{Formatter, Result};
  |                ^^^^^^^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `ro`
   --> src/data.rs:470:61
    |
470 |             (State::OutOfScope, Event::MutableBorrow{ from: ro }) =>
    |                                                             ^^ help: consider prefixing with an underscore: `_ro`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `to_ro`
   --> src/data.rs:479:62
    |
479 |             (State::FullPrivilege, Event::MutableReturn{ to: to_ro }) =>
    |                                                              ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:495:96
    |
495 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::MutableLend{ to: to_ro }) => State::Invalid,
    |                                                                                                ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `to_ro`
   --> src/data.rs:509:97
    |
509 |             (State::PartialPrivilege{ borrow_count: _, borrow_to: _ }, Event::StaticReturn{ to: to_ro }) => State::OutOfScope,
    |                                                                                                 ^^^^^ help: consider prefixing with an underscore: `_to_ro`

warning: unused variable: `ro`
   --> src/data.rs:532:93
    |
532 |             (State::RevokedPrivilege{ to: _, borrow_to: _ }, Event::MutableReacquire{ from: ro }) => State::FullPrivilege,
    |                                                                                             ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `ro`
   --> src/data.rs:534:40
    |
534 |             (_, Event::Duplicate { to: ro }) =>
    |                                        ^^ help: consider prefixing with an underscore: `_ro`

warning: unused variable: `timeline`
   --> src/data.rs:559:18
    |
559 |             Some(timeline) => {
    |                  ^^^^^^^^ help: consider prefixing with an underscore: `_timeline`

warning: unused variable: `line_number`
   --> src/data.rs:557:37
    |
557 |     fn get_state(&self, hash: &u64, line_number: &usize) -> Option<State> {
    |                                     ^^^^^^^^^^^ help: consider prefixing with an underscore: `_line_number`

warning: function is never used: `render_arrows_string`
   --> src/svg_frontend/right_panel.rs:221:4
    |
221 | fn render_arrows_string(
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the `borrow_to:` in this pattern is redundant
   --> src/data.rs:497:62
    |
497 |             (State::PartialPrivilege{ borrow_count: current, borrow_to: borrow_to }, Event::StaticLend{ to: to_ro }) => {
    |                                                              ----------^^^^^^^^^^
    |                                                              |
    |                                                              help: remove this
    |
    = note: `#[warn(non_shorthand_field_patterns)]` on by default

   Compiling rrt v0.1.0 (/mnt/c/Users/16167/Desktop/repos/rust-resource-timeline)
    Finished dev [unoptimized + debuginfo] target(s) in 4.76s
     Running `target/debug/examples/no_dangle`
s 1 2 OutOfScope
s 2 4 FullPrivilege
<svg width="450" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>no_dangle</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn <tspan data-hash="2">no_dangle</tspan>() -> String { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = <tspan data-hash="3">String::from</tspan>("hello"); </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="1">s</tspan> </text>
        <text class="code" x="20" y="170"> } </text>
    </g>

   
</svg>
<svg width="200px" height="230px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="timeline_svg">

    <desc>no_dangle</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
        <!-- Useful constructs -->
        <circle id="eventDot" cx="0" cy="0" r="5"/>
        <!-- used when pass to function by ref -->
        <g id="functionDot">
             <circle id="eventDot" cx="0" cy="0" r="8"/>
             <text class="functionIcon" dx="-6" dy="2" fill="#6e6b5e">f</text>
        </g>
        <marker id="arrowHead" viewBox="0 0 10 10"
            refX="1" refY="5" 
            markerUnits="strokeWidth"
            markerWidth="3px" markerHeight="3px"
            orient="auto" fill="gray">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="inherit"/>
        </marker>
    </defs>

    <g id="labels">
        <text style="text-anchor:middle" class="code" x="70" y="90" data-hash="1"><title>s, immutable</title>s</text>
    </g>

    <g id="timelines">
        <line data-hash="1" class="solid tooltip-trigger" x1="70" x2="70" y1="105" y2="145" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
        <line class="colorless tooltip-trigger" stroke-width="8px" x1="70" x2="70" y1="110" y2="140" data-tooltip-text="s is the unique value that can access the data in memory; can only read data"/>
    </g>

    <g id="events">
        <use xlink:href="#eventDot" data-hash="1" x="70" y="105" class="tooltip-trigger" data-tooltip-text="obtains data from String::from() (s's lifetime begins from here)"/>
        <use xlink:href="#eventDot" data-hash="1" x="70" y="145" class="tooltip-trigger" data-tooltip-text="moves it's value to another value (s lost ownership)"/>
    </g>

    <g id="arrows">
        <text x="96" y="110" fill="gray" font-size = "20" font-style="italic" class="tooltip-trigger" data-tooltip-text="String::from()">f</text>        <polyline stroke-width="5" stroke="gray" points="93,105 83,105 " marker-end="url(#arrowHead)" class="tooltip-trigger" data-tooltip-text="Move from the return value of String::from() to s"/>
    </g>
   
   <g id="tooltip" visibility="hidden">
		<rect x="2" y="2" width="25" height="25" fill="#464646" opacity="0.6" rx="2" ry="2"/>
		<text x="10" y="7" fill="white" font-size="12px" width="10px">Tooltip</text>
    </g>

    <script type="text/ecmascript"><![CDATA[
		(function() {
			var svg = document.getElementById('timeline_svg');
			var tooltip = svg.getElementById('tooltip');
			var tooltipText = tooltip.getElementsByTagName('text')[0];
            var tooltipRects = tooltip.getElementsByTagName('rect');
			var triggers = svg.getElementsByClassName('tooltip-trigger');

			for (var i = 0; i < triggers.length; i++) {
				triggers[i].addEventListener('mousemove', showTooltip);
				triggers[i].addEventListener('mouseout', hideTooltip);
			}
			function showTooltip(evt) {
				var CTM = svg.getScreenCTM();
				var x = (evt.clientX - CTM.e + 10) / CTM.a;
				var y = (evt.clientY - CTM.f + 10) / CTM.d;
				tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
				tooltip.setAttributeNS(null, "visibility", "visible");
				tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");

                var length = tooltipText.getComputedTextLength();
				for (var i = 0; i < tooltipRects.length; i++) {
					tooltipRects[i].setAttribute("width", length + 15);
				}
			}
			function hideTooltip(evt) {
				tooltip.setAttributeNS(null, "visibility", "hidden");
			}
		})()
    ]]></script>
</svg>
successfully wrote to examples/book_04_02_12_no_dangle/rendering_code.svg
successfully wrote to examples/book_04_02_12_no_dangle/rendering_timeline.svg
successfully wrote to rustBook/src/img/vis_04_02_12_code.svg
successfully wrote to rustBook/src/img/vis_04_02_12_timeline.svg
