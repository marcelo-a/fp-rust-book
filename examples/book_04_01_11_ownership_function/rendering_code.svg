<svg width="590" height="590px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>ownership_function</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
    overflow:visible;
}

svg {
    background-color: var(--bg-color);
}

text {
    /* fill: white; */
    /* fill: var(--text-color); */
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    white-space: pre;
    font-family: "monospace";
}

/* event related styling */
#eventDot:hover {
    transform: scale(1.5);
}

#eventDot {
    transition: all 0.3s;
}

#functionDot:hover {
    transform: scale(1.5);
}

#functionDot {
    transition: all 0.3s;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow_internal {
    stroke-width: 3px;
    fill: var(--bg-color);
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.colorless {
    color: var(--bg-color);
    fill: var(--bg-color);
}

.functionIcon {
    stroke: gray;
    fill: white;
    stroke-width: 1px;
    font-size: 30px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 1;
}

/* tooltip styling */
#tooltip {
    dominant-baseline: hanging;
    overflow:visible;
}

/* hash based styling */
[data-hash*="1"] {
    fill: #3355ff;
    stroke: #3355ff;
}

[data-hash*="2"] {
    fill: #33cc33;
    stroke: #33cc33;
}

[data-hash*="3"] {
    fill: #ff3300;
    stroke: #ff3300;
}

[data-hash*="4"] {
    fill: #6600ff;
    stroke: #6600ff;
}

[data-hash*="5"] {
    fill: #ff33cc;
    stroke: #ff33cc;
}

[data-hash*="6"] {
    fill: #663300;
    stroke: #663300;
}

[data-hash*="7"] {
    fill: #ff9900;
    stroke: #ff9900;
}
[data-hash*="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash*="9"] {
    fill: #9aeb58;
    stroke: #9aeb58;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> fn main() { </text>
        <text class="code" x="20" y="110">     let <tspan data-hash="1">s</tspan> = <tspan data-hash="5">String::from</tspan>("hello");  // s comes into scope </text>
        <text class="code" x="20" y="130">  </text>
        <text class="code" x="20" y="150">     <tspan data-hash="6">takes_ownership</tspan>(<tspan data-hash="1">s</tspan>);             // s's value moves into the function... </text>
        <text class="code" x="20" y="170">                                     // ... and so is no longer valid here </text>
        <text class="code" x="20" y="190">  </text>
        <text class="code" x="20" y="210">     let <tspan data-hash="2">x</tspan> = 5;                      // x comes into scope </text>
        <text class="code" x="20" y="230">  </text>
        <text class="code" x="20" y="250">     <tspan data-hash="7">makes_copy</tspan>(<tspan data-hash="2">x</tspan>);                  // x would move into the function, </text>
        <text class="code" x="20" y="270">                                     // but i32 is Copy, so itâ€™s okay to still </text>
        <text class="code" x="20" y="290">                                     // use x afterward </text>
        <text class="code" x="20" y="310">  </text>
        <text class="code" x="20" y="330"> } // Here, x goes out of scope, then s. But because s's value was moved, nothing </text>
        <text class="code" x="20" y="350">   // special happens. </text>
        <text class="code" x="20" y="370">  </text>
        <text class="code" x="20" y="390"> fn <tspan data-hash="6">takes_ownership</tspan>(<tspan data-hash="3">some_string</tspan>: String) { // some_string comes into scope </text>
        <text class="code" x="20" y="410">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="3">some_string</tspan>); </text>
        <text class="code" x="20" y="430"> } // Here, some_string goes out of scope and `drop` is called. The backing </text>
        <text class="code" x="20" y="450">   // memory is freed. </text>
        <text class="code" x="20" y="470">  </text>
        <text class="code" x="20" y="490"> fn <tspan data-hash="7">makes_copy</tspan>(<tspan data-hash="4">some_integer</tspan>: i32) { // some_integer comes into scope </text>
        <text class="code" x="20" y="510">     <tspan data-hash="8">println!</tspan>("{}", <tspan data-hash="4">some_integer</tspan>); </text>
        <text class="code" x="20" y="530"> } // Here, some_integer goes out of scope. Nothing special happens. </text>
    </g>

   
</svg>